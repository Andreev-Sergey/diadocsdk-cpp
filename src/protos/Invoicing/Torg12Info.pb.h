// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/Torg12Info.proto

#ifndef PROTOBUF_Invoicing_2fTorg12Info_2eproto__INCLUDED
#define PROTOBUF_Invoicing_2fTorg12Info_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Invoicing/Signer.pb.h"
#include "Invoicing/Official.pb.h"
#include "Invoicing/OrganizationInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
void protobuf_AssignDesc_Invoicing_2fTorg12Info_2eproto();
void protobuf_ShutdownFile_Invoicing_2fTorg12Info_2eproto();

class Torg12SellerTitleInfo;
class Torg12BuyerTitleInfo;
class Torg12Item;
class Grounds;

// ===================================================================

class Torg12SellerTitleInfo : public ::google::protobuf::Message {
 public:
  Torg12SellerTitleInfo();
  virtual ~Torg12SellerTitleInfo();
  
  Torg12SellerTitleInfo(const Torg12SellerTitleInfo& from);
  
  inline Torg12SellerTitleInfo& operator=(const Torg12SellerTitleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Torg12SellerTitleInfo& default_instance();
  
  void Swap(Torg12SellerTitleInfo* other);
  
  // implements Message ----------------------------------------------
  
  Torg12SellerTitleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Torg12SellerTitleInfo& from);
  void MergeFrom(const Torg12SellerTitleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string DocumentDate = 1;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 1;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  
  // optional string DocumentNumber = 2;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 2;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  
  // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant SellerDocflowParticipant = 3;
  inline bool has_sellerdocflowparticipant() const;
  inline void clear_sellerdocflowparticipant();
  static const int kSellerDocflowParticipantFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Invoicing::DocflowParticipant& sellerdocflowparticipant() const;
  inline ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* mutable_sellerdocflowparticipant();
  inline ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* release_sellerdocflowparticipant();
  
  // required .Diadoc.Api.Proto.Invoicing.DocflowParticipant BuyerDocflowParticipant = 4;
  inline bool has_buyerdocflowparticipant() const;
  inline void clear_buyerdocflowparticipant();
  static const int kBuyerDocflowParticipantFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Invoicing::DocflowParticipant& buyerdocflowparticipant() const;
  inline ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* mutable_buyerdocflowparticipant();
  inline ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* release_buyerdocflowparticipant();
  
  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Shipper = 5;
  inline bool has_shipper() const;
  inline void clear_shipper();
  static const int kShipperFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Invoicing::OrganizationInfo& shipper() const;
  inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* mutable_shipper();
  inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* release_shipper();
  
  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Consignee = 6;
  inline bool has_consignee() const;
  inline void clear_consignee();
  static const int kConsigneeFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Invoicing::OrganizationInfo& consignee() const;
  inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* mutable_consignee();
  inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* release_consignee();
  
  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Supplier = 7;
  inline bool has_supplier() const;
  inline void clear_supplier();
  static const int kSupplierFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Invoicing::OrganizationInfo& supplier() const;
  inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* mutable_supplier();
  inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* release_supplier();
  
  // optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Payer = 8;
  inline bool has_payer() const;
  inline void clear_payer();
  static const int kPayerFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Invoicing::OrganizationInfo& payer() const;
  inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* mutable_payer();
  inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* release_payer();
  
  // optional .Diadoc.Api.Proto.Invoicing.Grounds Grounds = 9;
  inline bool has_grounds() const;
  inline void clear_grounds();
  static const int kGroundsFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Invoicing::Grounds& grounds() const;
  inline ::Diadoc::Api::Proto::Invoicing::Grounds* mutable_grounds();
  inline ::Diadoc::Api::Proto::Invoicing::Grounds* release_grounds();
  
  // optional string WaybillDate = 10;
  inline bool has_waybilldate() const;
  inline void clear_waybilldate();
  static const int kWaybillDateFieldNumber = 10;
  inline const ::std::string& waybilldate() const;
  inline void set_waybilldate(const ::std::string& value);
  inline void set_waybilldate(const char* value);
  inline void set_waybilldate(const char* value, size_t size);
  inline ::std::string* mutable_waybilldate();
  inline ::std::string* release_waybilldate();
  
  // optional string WaybillNumber = 11;
  inline bool has_waybillnumber() const;
  inline void clear_waybillnumber();
  static const int kWaybillNumberFieldNumber = 11;
  inline const ::std::string& waybillnumber() const;
  inline void set_waybillnumber(const ::std::string& value);
  inline void set_waybillnumber(const char* value);
  inline void set_waybillnumber(const char* value, size_t size);
  inline ::std::string* mutable_waybillnumber();
  inline ::std::string* release_waybillnumber();
  
  // optional string OperationCode = 12;
  inline bool has_operationcode() const;
  inline void clear_operationcode();
  static const int kOperationCodeFieldNumber = 12;
  inline const ::std::string& operationcode() const;
  inline void set_operationcode(const ::std::string& value);
  inline void set_operationcode(const char* value);
  inline void set_operationcode(const char* value, size_t size);
  inline ::std::string* mutable_operationcode();
  inline ::std::string* release_operationcode();
  
  // repeated .Diadoc.Api.Proto.Invoicing.Torg12Item Items = 13;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::Invoicing::Torg12Item& items(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::Torg12Item* mutable_items(int index);
  inline ::Diadoc::Api::Proto::Invoicing::Torg12Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Torg12Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Torg12Item >*
      mutable_items();
  
  // optional string ParcelsQuantityTotal = 14;
  inline bool has_parcelsquantitytotal() const;
  inline void clear_parcelsquantitytotal();
  static const int kParcelsQuantityTotalFieldNumber = 14;
  inline const ::std::string& parcelsquantitytotal() const;
  inline void set_parcelsquantitytotal(const ::std::string& value);
  inline void set_parcelsquantitytotal(const char* value);
  inline void set_parcelsquantitytotal(const char* value, size_t size);
  inline ::std::string* mutable_parcelsquantitytotal();
  inline ::std::string* release_parcelsquantitytotal();
  
  // optional string ParcelsQuantityTotalInWords = 15;
  inline bool has_parcelsquantitytotalinwords() const;
  inline void clear_parcelsquantitytotalinwords();
  static const int kParcelsQuantityTotalInWordsFieldNumber = 15;
  inline const ::std::string& parcelsquantitytotalinwords() const;
  inline void set_parcelsquantitytotalinwords(const ::std::string& value);
  inline void set_parcelsquantitytotalinwords(const char* value);
  inline void set_parcelsquantitytotalinwords(const char* value, size_t size);
  inline ::std::string* mutable_parcelsquantitytotalinwords();
  inline ::std::string* release_parcelsquantitytotalinwords();
  
  // optional string GrossQuantityTotal = 16;
  inline bool has_grossquantitytotal() const;
  inline void clear_grossquantitytotal();
  static const int kGrossQuantityTotalFieldNumber = 16;
  inline const ::std::string& grossquantitytotal() const;
  inline void set_grossquantitytotal(const ::std::string& value);
  inline void set_grossquantitytotal(const char* value);
  inline void set_grossquantitytotal(const char* value, size_t size);
  inline ::std::string* mutable_grossquantitytotal();
  inline ::std::string* release_grossquantitytotal();
  
  // optional string GrossQuantityTotalInWords = 17;
  inline bool has_grossquantitytotalinwords() const;
  inline void clear_grossquantitytotalinwords();
  static const int kGrossQuantityTotalInWordsFieldNumber = 17;
  inline const ::std::string& grossquantitytotalinwords() const;
  inline void set_grossquantitytotalinwords(const ::std::string& value);
  inline void set_grossquantitytotalinwords(const char* value);
  inline void set_grossquantitytotalinwords(const char* value, size_t size);
  inline ::std::string* mutable_grossquantitytotalinwords();
  inline ::std::string* release_grossquantitytotalinwords();
  
  // optional string NetQuantityTotal = 18;
  inline bool has_netquantitytotal() const;
  inline void clear_netquantitytotal();
  static const int kNetQuantityTotalFieldNumber = 18;
  inline const ::std::string& netquantitytotal() const;
  inline void set_netquantitytotal(const ::std::string& value);
  inline void set_netquantitytotal(const char* value);
  inline void set_netquantitytotal(const char* value, size_t size);
  inline ::std::string* mutable_netquantitytotal();
  inline ::std::string* release_netquantitytotal();
  
  // optional string NetQuantityTotalInWords = 19;
  inline bool has_netquantitytotalinwords() const;
  inline void clear_netquantitytotalinwords();
  static const int kNetQuantityTotalInWordsFieldNumber = 19;
  inline const ::std::string& netquantitytotalinwords() const;
  inline void set_netquantitytotalinwords(const ::std::string& value);
  inline void set_netquantitytotalinwords(const char* value);
  inline void set_netquantitytotalinwords(const char* value, size_t size);
  inline ::std::string* mutable_netquantitytotalinwords();
  inline ::std::string* release_netquantitytotalinwords();
  
  // optional string QuantityTotal = 20;
  inline bool has_quantitytotal() const;
  inline void clear_quantitytotal();
  static const int kQuantityTotalFieldNumber = 20;
  inline const ::std::string& quantitytotal() const;
  inline void set_quantitytotal(const ::std::string& value);
  inline void set_quantitytotal(const char* value);
  inline void set_quantitytotal(const char* value, size_t size);
  inline ::std::string* mutable_quantitytotal();
  inline ::std::string* release_quantitytotal();
  
  // optional string TotalWithVatExcluded = 21;
  inline bool has_totalwithvatexcluded() const;
  inline void clear_totalwithvatexcluded();
  static const int kTotalWithVatExcludedFieldNumber = 21;
  inline const ::std::string& totalwithvatexcluded() const;
  inline void set_totalwithvatexcluded(const ::std::string& value);
  inline void set_totalwithvatexcluded(const char* value);
  inline void set_totalwithvatexcluded(const char* value, size_t size);
  inline ::std::string* mutable_totalwithvatexcluded();
  inline ::std::string* release_totalwithvatexcluded();
  
  // optional string Vat = 22;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 22;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  
  // required string Total = 23;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 23;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  
  // optional string TotalInWords = 24;
  inline bool has_totalinwords() const;
  inline void clear_totalinwords();
  static const int kTotalInWordsFieldNumber = 24;
  inline const ::std::string& totalinwords() const;
  inline void set_totalinwords(const ::std::string& value);
  inline void set_totalinwords(const char* value);
  inline void set_totalinwords(const char* value, size_t size);
  inline ::std::string* mutable_totalinwords();
  inline ::std::string* release_totalinwords();
  
  // optional string SupplyDate = 25;
  inline bool has_supplydate() const;
  inline void clear_supplydate();
  static const int kSupplyDateFieldNumber = 25;
  inline const ::std::string& supplydate() const;
  inline void set_supplydate(const ::std::string& value);
  inline void set_supplydate(const char* value);
  inline void set_supplydate(const char* value, size_t size);
  inline ::std::string* mutable_supplydate();
  inline ::std::string* release_supplydate();
  
  // optional .Diadoc.Api.Proto.Invoicing.Official SupplyAllowedBy = 26;
  inline bool has_supplyallowedby() const;
  inline void clear_supplyallowedby();
  static const int kSupplyAllowedByFieldNumber = 26;
  inline const ::Diadoc::Api::Proto::Invoicing::Official& supplyallowedby() const;
  inline ::Diadoc::Api::Proto::Invoicing::Official* mutable_supplyallowedby();
  inline ::Diadoc::Api::Proto::Invoicing::Official* release_supplyallowedby();
  
  // optional .Diadoc.Api.Proto.Invoicing.Official SupplyPerformedBy = 27;
  inline bool has_supplyperformedby() const;
  inline void clear_supplyperformedby();
  static const int kSupplyPerformedByFieldNumber = 27;
  inline const ::Diadoc::Api::Proto::Invoicing::Official& supplyperformedby() const;
  inline ::Diadoc::Api::Proto::Invoicing::Official* mutable_supplyperformedby();
  inline ::Diadoc::Api::Proto::Invoicing::Official* release_supplyperformedby();
  
  // optional .Diadoc.Api.Proto.Invoicing.Official ChiefAccountant = 28;
  inline bool has_chiefaccountant() const;
  inline void clear_chiefaccountant();
  static const int kChiefAccountantFieldNumber = 28;
  inline const ::Diadoc::Api::Proto::Invoicing::Official& chiefaccountant() const;
  inline ::Diadoc::Api::Proto::Invoicing::Official* mutable_chiefaccountant();
  inline ::Diadoc::Api::Proto::Invoicing::Official* release_chiefaccountant();
  
  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 29;
  inline bool has_signer() const;
  inline void clear_signer();
  static const int kSignerFieldNumber = 29;
  inline const ::Diadoc::Api::Proto::Invoicing::Signer& signer() const;
  inline ::Diadoc::Api::Proto::Invoicing::Signer* mutable_signer();
  inline ::Diadoc::Api::Proto::Invoicing::Signer* release_signer();
  
  // optional string AdditionalInfo = 30;
  inline bool has_additionalinfo() const;
  inline void clear_additionalinfo();
  static const int kAdditionalInfoFieldNumber = 30;
  inline const ::std::string& additionalinfo() const;
  inline void set_additionalinfo(const ::std::string& value);
  inline void set_additionalinfo(const char* value);
  inline void set_additionalinfo(const char* value, size_t size);
  inline ::std::string* mutable_additionalinfo();
  inline ::std::string* release_additionalinfo();
  
  // optional string AttachmentSheetsQuantity = 31;
  inline bool has_attachmentsheetsquantity() const;
  inline void clear_attachmentsheetsquantity();
  static const int kAttachmentSheetsQuantityFieldNumber = 31;
  inline const ::std::string& attachmentsheetsquantity() const;
  inline void set_attachmentsheetsquantity(const ::std::string& value);
  inline void set_attachmentsheetsquantity(const char* value);
  inline void set_attachmentsheetsquantity(const char* value, size_t size);
  inline ::std::string* mutable_attachmentsheetsquantity();
  inline ::std::string* release_attachmentsheetsquantity();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.Torg12SellerTitleInfo)
 private:
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_sellerdocflowparticipant();
  inline void clear_has_sellerdocflowparticipant();
  inline void set_has_buyerdocflowparticipant();
  inline void clear_has_buyerdocflowparticipant();
  inline void set_has_shipper();
  inline void clear_has_shipper();
  inline void set_has_consignee();
  inline void clear_has_consignee();
  inline void set_has_supplier();
  inline void clear_has_supplier();
  inline void set_has_payer();
  inline void clear_has_payer();
  inline void set_has_grounds();
  inline void clear_has_grounds();
  inline void set_has_waybilldate();
  inline void clear_has_waybilldate();
  inline void set_has_waybillnumber();
  inline void clear_has_waybillnumber();
  inline void set_has_operationcode();
  inline void clear_has_operationcode();
  inline void set_has_parcelsquantitytotal();
  inline void clear_has_parcelsquantitytotal();
  inline void set_has_parcelsquantitytotalinwords();
  inline void clear_has_parcelsquantitytotalinwords();
  inline void set_has_grossquantitytotal();
  inline void clear_has_grossquantitytotal();
  inline void set_has_grossquantitytotalinwords();
  inline void clear_has_grossquantitytotalinwords();
  inline void set_has_netquantitytotal();
  inline void clear_has_netquantitytotal();
  inline void set_has_netquantitytotalinwords();
  inline void clear_has_netquantitytotalinwords();
  inline void set_has_quantitytotal();
  inline void clear_has_quantitytotal();
  inline void set_has_totalwithvatexcluded();
  inline void clear_has_totalwithvatexcluded();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_totalinwords();
  inline void clear_has_totalinwords();
  inline void set_has_supplydate();
  inline void clear_has_supplydate();
  inline void set_has_supplyallowedby();
  inline void clear_has_supplyallowedby();
  inline void set_has_supplyperformedby();
  inline void clear_has_supplyperformedby();
  inline void set_has_chiefaccountant();
  inline void clear_has_chiefaccountant();
  inline void set_has_signer();
  inline void clear_has_signer();
  inline void set_has_additionalinfo();
  inline void clear_has_additionalinfo();
  inline void set_has_attachmentsheetsquantity();
  inline void clear_has_attachmentsheetsquantity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* sellerdocflowparticipant_;
  ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* buyerdocflowparticipant_;
  ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* shipper_;
  ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* consignee_;
  ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* supplier_;
  ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* payer_;
  ::Diadoc::Api::Proto::Invoicing::Grounds* grounds_;
  ::std::string* waybilldate_;
  ::std::string* waybillnumber_;
  ::std::string* operationcode_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Torg12Item > items_;
  ::std::string* parcelsquantitytotal_;
  ::std::string* parcelsquantitytotalinwords_;
  ::std::string* grossquantitytotal_;
  ::std::string* grossquantitytotalinwords_;
  ::std::string* netquantitytotal_;
  ::std::string* netquantitytotalinwords_;
  ::std::string* quantitytotal_;
  ::std::string* totalwithvatexcluded_;
  ::std::string* vat_;
  ::std::string* total_;
  ::std::string* totalinwords_;
  ::std::string* supplydate_;
  ::Diadoc::Api::Proto::Invoicing::Official* supplyallowedby_;
  ::Diadoc::Api::Proto::Invoicing::Official* supplyperformedby_;
  ::Diadoc::Api::Proto::Invoicing::Official* chiefaccountant_;
  ::Diadoc::Api::Proto::Invoicing::Signer* signer_;
  ::std::string* additionalinfo_;
  ::std::string* attachmentsheetsquantity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];
  
  friend void  protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fTorg12Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fTorg12Info_2eproto();
  
  void InitAsDefaultInstance();
  static Torg12SellerTitleInfo* default_instance_;
};
// -------------------------------------------------------------------

class Torg12BuyerTitleInfo : public ::google::protobuf::Message {
 public:
  Torg12BuyerTitleInfo();
  virtual ~Torg12BuyerTitleInfo();
  
  Torg12BuyerTitleInfo(const Torg12BuyerTitleInfo& from);
  
  inline Torg12BuyerTitleInfo& operator=(const Torg12BuyerTitleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Torg12BuyerTitleInfo& default_instance();
  
  void Swap(Torg12BuyerTitleInfo* other);
  
  // implements Message ----------------------------------------------
  
  Torg12BuyerTitleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Torg12BuyerTitleInfo& from);
  void MergeFrom(const Torg12BuyerTitleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string ShipmentReceiptDate = 1;
  inline bool has_shipmentreceiptdate() const;
  inline void clear_shipmentreceiptdate();
  static const int kShipmentReceiptDateFieldNumber = 1;
  inline const ::std::string& shipmentreceiptdate() const;
  inline void set_shipmentreceiptdate(const ::std::string& value);
  inline void set_shipmentreceiptdate(const char* value);
  inline void set_shipmentreceiptdate(const char* value, size_t size);
  inline ::std::string* mutable_shipmentreceiptdate();
  inline ::std::string* release_shipmentreceiptdate();
  
  // optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 2;
  inline bool has_attorney() const;
  inline void clear_attorney();
  static const int kAttorneyFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Invoicing::Attorney& attorney() const;
  inline ::Diadoc::Api::Proto::Invoicing::Attorney* mutable_attorney();
  inline ::Diadoc::Api::Proto::Invoicing::Attorney* release_attorney();
  
  // optional .Diadoc.Api.Proto.Invoicing.Official AcceptedBy = 3;
  inline bool has_acceptedby() const;
  inline void clear_acceptedby();
  static const int kAcceptedByFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Invoicing::Official& acceptedby() const;
  inline ::Diadoc::Api::Proto::Invoicing::Official* mutable_acceptedby();
  inline ::Diadoc::Api::Proto::Invoicing::Official* release_acceptedby();
  
  // optional .Diadoc.Api.Proto.Invoicing.Official ReceivedBy = 4;
  inline bool has_receivedby() const;
  inline void clear_receivedby();
  static const int kReceivedByFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Invoicing::Official& receivedby() const;
  inline ::Diadoc::Api::Proto::Invoicing::Official* mutable_receivedby();
  inline ::Diadoc::Api::Proto::Invoicing::Official* release_receivedby();
  
  // required .Diadoc.Api.Proto.Invoicing.Signer Signer = 5;
  inline bool has_signer() const;
  inline void clear_signer();
  static const int kSignerFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Invoicing::Signer& signer() const;
  inline ::Diadoc::Api::Proto::Invoicing::Signer* mutable_signer();
  inline ::Diadoc::Api::Proto::Invoicing::Signer* release_signer();
  
  // optional string AdditionalInfo = 6;
  inline bool has_additionalinfo() const;
  inline void clear_additionalinfo();
  static const int kAdditionalInfoFieldNumber = 6;
  inline const ::std::string& additionalinfo() const;
  inline void set_additionalinfo(const ::std::string& value);
  inline void set_additionalinfo(const char* value);
  inline void set_additionalinfo(const char* value, size_t size);
  inline ::std::string* mutable_additionalinfo();
  inline ::std::string* release_additionalinfo();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.Torg12BuyerTitleInfo)
 private:
  inline void set_has_shipmentreceiptdate();
  inline void clear_has_shipmentreceiptdate();
  inline void set_has_attorney();
  inline void clear_has_attorney();
  inline void set_has_acceptedby();
  inline void clear_has_acceptedby();
  inline void set_has_receivedby();
  inline void clear_has_receivedby();
  inline void set_has_signer();
  inline void clear_has_signer();
  inline void set_has_additionalinfo();
  inline void clear_has_additionalinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* shipmentreceiptdate_;
  ::Diadoc::Api::Proto::Invoicing::Attorney* attorney_;
  ::Diadoc::Api::Proto::Invoicing::Official* acceptedby_;
  ::Diadoc::Api::Proto::Invoicing::Official* receivedby_;
  ::Diadoc::Api::Proto::Invoicing::Signer* signer_;
  ::std::string* additionalinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fTorg12Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fTorg12Info_2eproto();
  
  void InitAsDefaultInstance();
  static Torg12BuyerTitleInfo* default_instance_;
};
// -------------------------------------------------------------------

class Torg12Item : public ::google::protobuf::Message {
 public:
  Torg12Item();
  virtual ~Torg12Item();
  
  Torg12Item(const Torg12Item& from);
  
  inline Torg12Item& operator=(const Torg12Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Torg12Item& default_instance();
  
  void Swap(Torg12Item* other);
  
  // implements Message ----------------------------------------------
  
  Torg12Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Torg12Item& from);
  void MergeFrom(const Torg12Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string Feature = 2;
  inline bool has_feature() const;
  inline void clear_feature();
  static const int kFeatureFieldNumber = 2;
  inline const ::std::string& feature() const;
  inline void set_feature(const ::std::string& value);
  inline void set_feature(const char* value);
  inline void set_feature(const char* value, size_t size);
  inline ::std::string* mutable_feature();
  inline ::std::string* release_feature();
  
  // optional string Sort = 3;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 3;
  inline const ::std::string& sort() const;
  inline void set_sort(const ::std::string& value);
  inline void set_sort(const char* value);
  inline void set_sort(const char* value, size_t size);
  inline ::std::string* mutable_sort();
  inline ::std::string* release_sort();
  
  // optional string NomenclatureArticle = 4;
  inline bool has_nomenclaturearticle() const;
  inline void clear_nomenclaturearticle();
  static const int kNomenclatureArticleFieldNumber = 4;
  inline const ::std::string& nomenclaturearticle() const;
  inline void set_nomenclaturearticle(const ::std::string& value);
  inline void set_nomenclaturearticle(const char* value);
  inline void set_nomenclaturearticle(const char* value, size_t size);
  inline ::std::string* mutable_nomenclaturearticle();
  inline ::std::string* release_nomenclaturearticle();
  
  // optional string Code = 5;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 5;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  
  // optional string UnitCode = 6;
  inline bool has_unitcode() const;
  inline void clear_unitcode();
  static const int kUnitCodeFieldNumber = 6;
  inline const ::std::string& unitcode() const;
  inline void set_unitcode(const ::std::string& value);
  inline void set_unitcode(const char* value);
  inline void set_unitcode(const char* value, size_t size);
  inline ::std::string* mutable_unitcode();
  inline ::std::string* release_unitcode();
  
  // required string UnitName = 7;
  inline bool has_unitname() const;
  inline void clear_unitname();
  static const int kUnitNameFieldNumber = 7;
  inline const ::std::string& unitname() const;
  inline void set_unitname(const ::std::string& value);
  inline void set_unitname(const char* value);
  inline void set_unitname(const char* value, size_t size);
  inline ::std::string* mutable_unitname();
  inline ::std::string* release_unitname();
  
  // optional string ParcelType = 8;
  inline bool has_parceltype() const;
  inline void clear_parceltype();
  static const int kParcelTypeFieldNumber = 8;
  inline const ::std::string& parceltype() const;
  inline void set_parceltype(const ::std::string& value);
  inline void set_parceltype(const char* value);
  inline void set_parceltype(const char* value, size_t size);
  inline ::std::string* mutable_parceltype();
  inline ::std::string* release_parceltype();
  
  // optional string ParcelCapacity = 9;
  inline bool has_parcelcapacity() const;
  inline void clear_parcelcapacity();
  static const int kParcelCapacityFieldNumber = 9;
  inline const ::std::string& parcelcapacity() const;
  inline void set_parcelcapacity(const ::std::string& value);
  inline void set_parcelcapacity(const char* value);
  inline void set_parcelcapacity(const char* value, size_t size);
  inline ::std::string* mutable_parcelcapacity();
  inline ::std::string* release_parcelcapacity();
  
  // optional string ParcelsQuantity = 10;
  inline bool has_parcelsquantity() const;
  inline void clear_parcelsquantity();
  static const int kParcelsQuantityFieldNumber = 10;
  inline const ::std::string& parcelsquantity() const;
  inline void set_parcelsquantity(const ::std::string& value);
  inline void set_parcelsquantity(const char* value);
  inline void set_parcelsquantity(const char* value, size_t size);
  inline ::std::string* mutable_parcelsquantity();
  inline ::std::string* release_parcelsquantity();
  
  // optional string GrossQuantity = 11;
  inline bool has_grossquantity() const;
  inline void clear_grossquantity();
  static const int kGrossQuantityFieldNumber = 11;
  inline const ::std::string& grossquantity() const;
  inline void set_grossquantity(const ::std::string& value);
  inline void set_grossquantity(const char* value);
  inline void set_grossquantity(const char* value, size_t size);
  inline ::std::string* mutable_grossquantity();
  inline ::std::string* release_grossquantity();
  
  // required string Quantity = 12;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 12;
  inline const ::std::string& quantity() const;
  inline void set_quantity(const ::std::string& value);
  inline void set_quantity(const char* value);
  inline void set_quantity(const char* value, size_t size);
  inline ::std::string* mutable_quantity();
  inline ::std::string* release_quantity();
  
  // optional string Price = 13;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 13;
  inline const ::std::string& price() const;
  inline void set_price(const ::std::string& value);
  inline void set_price(const char* value);
  inline void set_price(const char* value, size_t size);
  inline ::std::string* mutable_price();
  inline ::std::string* release_price();
  
  // required string TaxRate = 14;
  inline bool has_taxrate() const;
  inline void clear_taxrate();
  static const int kTaxRateFieldNumber = 14;
  inline const ::std::string& taxrate() const;
  inline void set_taxrate(const ::std::string& value);
  inline void set_taxrate(const char* value);
  inline void set_taxrate(const char* value, size_t size);
  inline ::std::string* mutable_taxrate();
  inline ::std::string* release_taxrate();
  
  // optional string SubtotalWithVatExcluded = 15;
  inline bool has_subtotalwithvatexcluded() const;
  inline void clear_subtotalwithvatexcluded();
  static const int kSubtotalWithVatExcludedFieldNumber = 15;
  inline const ::std::string& subtotalwithvatexcluded() const;
  inline void set_subtotalwithvatexcluded(const ::std::string& value);
  inline void set_subtotalwithvatexcluded(const char* value);
  inline void set_subtotalwithvatexcluded(const char* value, size_t size);
  inline ::std::string* mutable_subtotalwithvatexcluded();
  inline ::std::string* release_subtotalwithvatexcluded();
  
  // optional string Vat = 16;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 16;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  
  // required string Subtotal = 17;
  inline bool has_subtotal() const;
  inline void clear_subtotal();
  static const int kSubtotalFieldNumber = 17;
  inline const ::std::string& subtotal() const;
  inline void set_subtotal(const ::std::string& value);
  inline void set_subtotal(const char* value);
  inline void set_subtotal(const char* value, size_t size);
  inline ::std::string* mutable_subtotal();
  inline ::std::string* release_subtotal();
  
  // optional string AdditionalInfo = 18;
  inline bool has_additionalinfo() const;
  inline void clear_additionalinfo();
  static const int kAdditionalInfoFieldNumber = 18;
  inline const ::std::string& additionalinfo() const;
  inline void set_additionalinfo(const ::std::string& value);
  inline void set_additionalinfo(const char* value);
  inline void set_additionalinfo(const char* value, size_t size);
  inline ::std::string* mutable_additionalinfo();
  inline ::std::string* release_additionalinfo();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.Torg12Item)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_feature();
  inline void clear_has_feature();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_nomenclaturearticle();
  inline void clear_has_nomenclaturearticle();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_unitcode();
  inline void clear_has_unitcode();
  inline void set_has_unitname();
  inline void clear_has_unitname();
  inline void set_has_parceltype();
  inline void clear_has_parceltype();
  inline void set_has_parcelcapacity();
  inline void clear_has_parcelcapacity();
  inline void set_has_parcelsquantity();
  inline void clear_has_parcelsquantity();
  inline void set_has_grossquantity();
  inline void clear_has_grossquantity();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_taxrate();
  inline void clear_has_taxrate();
  inline void set_has_subtotalwithvatexcluded();
  inline void clear_has_subtotalwithvatexcluded();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_subtotal();
  inline void clear_has_subtotal();
  inline void set_has_additionalinfo();
  inline void clear_has_additionalinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* feature_;
  ::std::string* sort_;
  ::std::string* nomenclaturearticle_;
  ::std::string* code_;
  ::std::string* unitcode_;
  ::std::string* unitname_;
  ::std::string* parceltype_;
  ::std::string* parcelcapacity_;
  ::std::string* parcelsquantity_;
  ::std::string* grossquantity_;
  ::std::string* quantity_;
  ::std::string* price_;
  ::std::string* taxrate_;
  ::std::string* subtotalwithvatexcluded_;
  ::std::string* vat_;
  ::std::string* subtotal_;
  ::std::string* additionalinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fTorg12Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fTorg12Info_2eproto();
  
  void InitAsDefaultInstance();
  static Torg12Item* default_instance_;
};
// -------------------------------------------------------------------

class Grounds : public ::google::protobuf::Message {
 public:
  Grounds();
  virtual ~Grounds();
  
  Grounds(const Grounds& from);
  
  inline Grounds& operator=(const Grounds& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Grounds& default_instance();
  
  void Swap(Grounds* other);
  
  // implements Message ----------------------------------------------
  
  Grounds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Grounds& from);
  void MergeFrom(const Grounds& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string DocumentName = 1;
  inline bool has_documentname() const;
  inline void clear_documentname();
  static const int kDocumentNameFieldNumber = 1;
  inline const ::std::string& documentname() const;
  inline void set_documentname(const ::std::string& value);
  inline void set_documentname(const char* value);
  inline void set_documentname(const char* value, size_t size);
  inline ::std::string* mutable_documentname();
  inline ::std::string* release_documentname();
  
  // optional string DocumentNumber = 2;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 2;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  
  // optional string DocumentDate = 3;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 3;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  
  // optional string AdditionalInfo = 4;
  inline bool has_additionalinfo() const;
  inline void clear_additionalinfo();
  static const int kAdditionalInfoFieldNumber = 4;
  inline const ::std::string& additionalinfo() const;
  inline void set_additionalinfo(const ::std::string& value);
  inline void set_additionalinfo(const char* value);
  inline void set_additionalinfo(const char* value, size_t size);
  inline ::std::string* mutable_additionalinfo();
  inline ::std::string* release_additionalinfo();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Invoicing.Grounds)
 private:
  inline void set_has_documentname();
  inline void clear_has_documentname();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_additionalinfo();
  inline void clear_has_additionalinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* documentname_;
  ::std::string* documentnumber_;
  ::std::string* documentdate_;
  ::std::string* additionalinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Invoicing_2fTorg12Info_2eproto();
  friend void protobuf_AssignDesc_Invoicing_2fTorg12Info_2eproto();
  friend void protobuf_ShutdownFile_Invoicing_2fTorg12Info_2eproto();
  
  void InitAsDefaultInstance();
  static Grounds* default_instance_;
};
// ===================================================================


// ===================================================================

// Torg12SellerTitleInfo

// required string DocumentDate = 1;
inline bool Torg12SellerTitleInfo::has_documentdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_documentdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Torg12SellerTitleInfo::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Torg12SellerTitleInfo::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& Torg12SellerTitleInfo::documentdate() const {
  return *documentdate_;
}
inline void Torg12SellerTitleInfo::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
}
inline void Torg12SellerTitleInfo::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
}
inline void Torg12SellerTitleInfo::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  return documentdate_;
}
inline ::std::string* Torg12SellerTitleInfo::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string DocumentNumber = 2;
inline bool Torg12SellerTitleInfo::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Torg12SellerTitleInfo::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Torg12SellerTitleInfo::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& Torg12SellerTitleInfo::documentnumber() const {
  return *documentnumber_;
}
inline void Torg12SellerTitleInfo::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
}
inline void Torg12SellerTitleInfo::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
}
inline void Torg12SellerTitleInfo::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  return documentnumber_;
}
inline ::std::string* Torg12SellerTitleInfo::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .Diadoc.Api.Proto.Invoicing.DocflowParticipant SellerDocflowParticipant = 3;
inline bool Torg12SellerTitleInfo::has_sellerdocflowparticipant() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_sellerdocflowparticipant() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Torg12SellerTitleInfo::clear_has_sellerdocflowparticipant() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Torg12SellerTitleInfo::clear_sellerdocflowparticipant() {
  if (sellerdocflowparticipant_ != NULL) sellerdocflowparticipant_->::Diadoc::Api::Proto::Invoicing::DocflowParticipant::Clear();
  clear_has_sellerdocflowparticipant();
}
inline const ::Diadoc::Api::Proto::Invoicing::DocflowParticipant& Torg12SellerTitleInfo::sellerdocflowparticipant() const {
  return sellerdocflowparticipant_ != NULL ? *sellerdocflowparticipant_ : *default_instance_->sellerdocflowparticipant_;
}
inline ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* Torg12SellerTitleInfo::mutable_sellerdocflowparticipant() {
  set_has_sellerdocflowparticipant();
  if (sellerdocflowparticipant_ == NULL) sellerdocflowparticipant_ = new ::Diadoc::Api::Proto::Invoicing::DocflowParticipant;
  return sellerdocflowparticipant_;
}
inline ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* Torg12SellerTitleInfo::release_sellerdocflowparticipant() {
  clear_has_sellerdocflowparticipant();
  ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* temp = sellerdocflowparticipant_;
  sellerdocflowparticipant_ = NULL;
  return temp;
}

// required .Diadoc.Api.Proto.Invoicing.DocflowParticipant BuyerDocflowParticipant = 4;
inline bool Torg12SellerTitleInfo::has_buyerdocflowparticipant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_buyerdocflowparticipant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Torg12SellerTitleInfo::clear_has_buyerdocflowparticipant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Torg12SellerTitleInfo::clear_buyerdocflowparticipant() {
  if (buyerdocflowparticipant_ != NULL) buyerdocflowparticipant_->::Diadoc::Api::Proto::Invoicing::DocflowParticipant::Clear();
  clear_has_buyerdocflowparticipant();
}
inline const ::Diadoc::Api::Proto::Invoicing::DocflowParticipant& Torg12SellerTitleInfo::buyerdocflowparticipant() const {
  return buyerdocflowparticipant_ != NULL ? *buyerdocflowparticipant_ : *default_instance_->buyerdocflowparticipant_;
}
inline ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* Torg12SellerTitleInfo::mutable_buyerdocflowparticipant() {
  set_has_buyerdocflowparticipant();
  if (buyerdocflowparticipant_ == NULL) buyerdocflowparticipant_ = new ::Diadoc::Api::Proto::Invoicing::DocflowParticipant;
  return buyerdocflowparticipant_;
}
inline ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* Torg12SellerTitleInfo::release_buyerdocflowparticipant() {
  clear_has_buyerdocflowparticipant();
  ::Diadoc::Api::Proto::Invoicing::DocflowParticipant* temp = buyerdocflowparticipant_;
  buyerdocflowparticipant_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Shipper = 5;
inline bool Torg12SellerTitleInfo::has_shipper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_shipper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Torg12SellerTitleInfo::clear_has_shipper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Torg12SellerTitleInfo::clear_shipper() {
  if (shipper_ != NULL) shipper_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
  clear_has_shipper();
}
inline const ::Diadoc::Api::Proto::Invoicing::OrganizationInfo& Torg12SellerTitleInfo::shipper() const {
  return shipper_ != NULL ? *shipper_ : *default_instance_->shipper_;
}
inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* Torg12SellerTitleInfo::mutable_shipper() {
  set_has_shipper();
  if (shipper_ == NULL) shipper_ = new ::Diadoc::Api::Proto::Invoicing::OrganizationInfo;
  return shipper_;
}
inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* Torg12SellerTitleInfo::release_shipper() {
  clear_has_shipper();
  ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* temp = shipper_;
  shipper_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Consignee = 6;
inline bool Torg12SellerTitleInfo::has_consignee() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_consignee() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Torg12SellerTitleInfo::clear_has_consignee() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Torg12SellerTitleInfo::clear_consignee() {
  if (consignee_ != NULL) consignee_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
  clear_has_consignee();
}
inline const ::Diadoc::Api::Proto::Invoicing::OrganizationInfo& Torg12SellerTitleInfo::consignee() const {
  return consignee_ != NULL ? *consignee_ : *default_instance_->consignee_;
}
inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* Torg12SellerTitleInfo::mutable_consignee() {
  set_has_consignee();
  if (consignee_ == NULL) consignee_ = new ::Diadoc::Api::Proto::Invoicing::OrganizationInfo;
  return consignee_;
}
inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* Torg12SellerTitleInfo::release_consignee() {
  clear_has_consignee();
  ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* temp = consignee_;
  consignee_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Supplier = 7;
inline bool Torg12SellerTitleInfo::has_supplier() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_supplier() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Torg12SellerTitleInfo::clear_has_supplier() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Torg12SellerTitleInfo::clear_supplier() {
  if (supplier_ != NULL) supplier_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
  clear_has_supplier();
}
inline const ::Diadoc::Api::Proto::Invoicing::OrganizationInfo& Torg12SellerTitleInfo::supplier() const {
  return supplier_ != NULL ? *supplier_ : *default_instance_->supplier_;
}
inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* Torg12SellerTitleInfo::mutable_supplier() {
  set_has_supplier();
  if (supplier_ == NULL) supplier_ = new ::Diadoc::Api::Proto::Invoicing::OrganizationInfo;
  return supplier_;
}
inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* Torg12SellerTitleInfo::release_supplier() {
  clear_has_supplier();
  ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* temp = supplier_;
  supplier_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.OrganizationInfo Payer = 8;
inline bool Torg12SellerTitleInfo::has_payer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_payer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Torg12SellerTitleInfo::clear_has_payer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Torg12SellerTitleInfo::clear_payer() {
  if (payer_ != NULL) payer_->::Diadoc::Api::Proto::Invoicing::OrganizationInfo::Clear();
  clear_has_payer();
}
inline const ::Diadoc::Api::Proto::Invoicing::OrganizationInfo& Torg12SellerTitleInfo::payer() const {
  return payer_ != NULL ? *payer_ : *default_instance_->payer_;
}
inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* Torg12SellerTitleInfo::mutable_payer() {
  set_has_payer();
  if (payer_ == NULL) payer_ = new ::Diadoc::Api::Proto::Invoicing::OrganizationInfo;
  return payer_;
}
inline ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* Torg12SellerTitleInfo::release_payer() {
  clear_has_payer();
  ::Diadoc::Api::Proto::Invoicing::OrganizationInfo* temp = payer_;
  payer_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.Grounds Grounds = 9;
inline bool Torg12SellerTitleInfo::has_grounds() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_grounds() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Torg12SellerTitleInfo::clear_has_grounds() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Torg12SellerTitleInfo::clear_grounds() {
  if (grounds_ != NULL) grounds_->::Diadoc::Api::Proto::Invoicing::Grounds::Clear();
  clear_has_grounds();
}
inline const ::Diadoc::Api::Proto::Invoicing::Grounds& Torg12SellerTitleInfo::grounds() const {
  return grounds_ != NULL ? *grounds_ : *default_instance_->grounds_;
}
inline ::Diadoc::Api::Proto::Invoicing::Grounds* Torg12SellerTitleInfo::mutable_grounds() {
  set_has_grounds();
  if (grounds_ == NULL) grounds_ = new ::Diadoc::Api::Proto::Invoicing::Grounds;
  return grounds_;
}
inline ::Diadoc::Api::Proto::Invoicing::Grounds* Torg12SellerTitleInfo::release_grounds() {
  clear_has_grounds();
  ::Diadoc::Api::Proto::Invoicing::Grounds* temp = grounds_;
  grounds_ = NULL;
  return temp;
}

// optional string WaybillDate = 10;
inline bool Torg12SellerTitleInfo::has_waybilldate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_waybilldate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Torg12SellerTitleInfo::clear_has_waybilldate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Torg12SellerTitleInfo::clear_waybilldate() {
  if (waybilldate_ != &::google::protobuf::internal::kEmptyString) {
    waybilldate_->clear();
  }
  clear_has_waybilldate();
}
inline const ::std::string& Torg12SellerTitleInfo::waybilldate() const {
  return *waybilldate_;
}
inline void Torg12SellerTitleInfo::set_waybilldate(const ::std::string& value) {
  set_has_waybilldate();
  if (waybilldate_ == &::google::protobuf::internal::kEmptyString) {
    waybilldate_ = new ::std::string;
  }
  waybilldate_->assign(value);
}
inline void Torg12SellerTitleInfo::set_waybilldate(const char* value) {
  set_has_waybilldate();
  if (waybilldate_ == &::google::protobuf::internal::kEmptyString) {
    waybilldate_ = new ::std::string;
  }
  waybilldate_->assign(value);
}
inline void Torg12SellerTitleInfo::set_waybilldate(const char* value, size_t size) {
  set_has_waybilldate();
  if (waybilldate_ == &::google::protobuf::internal::kEmptyString) {
    waybilldate_ = new ::std::string;
  }
  waybilldate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_waybilldate() {
  set_has_waybilldate();
  if (waybilldate_ == &::google::protobuf::internal::kEmptyString) {
    waybilldate_ = new ::std::string;
  }
  return waybilldate_;
}
inline ::std::string* Torg12SellerTitleInfo::release_waybilldate() {
  clear_has_waybilldate();
  if (waybilldate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = waybilldate_;
    waybilldate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string WaybillNumber = 11;
inline bool Torg12SellerTitleInfo::has_waybillnumber() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_waybillnumber() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Torg12SellerTitleInfo::clear_has_waybillnumber() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Torg12SellerTitleInfo::clear_waybillnumber() {
  if (waybillnumber_ != &::google::protobuf::internal::kEmptyString) {
    waybillnumber_->clear();
  }
  clear_has_waybillnumber();
}
inline const ::std::string& Torg12SellerTitleInfo::waybillnumber() const {
  return *waybillnumber_;
}
inline void Torg12SellerTitleInfo::set_waybillnumber(const ::std::string& value) {
  set_has_waybillnumber();
  if (waybillnumber_ == &::google::protobuf::internal::kEmptyString) {
    waybillnumber_ = new ::std::string;
  }
  waybillnumber_->assign(value);
}
inline void Torg12SellerTitleInfo::set_waybillnumber(const char* value) {
  set_has_waybillnumber();
  if (waybillnumber_ == &::google::protobuf::internal::kEmptyString) {
    waybillnumber_ = new ::std::string;
  }
  waybillnumber_->assign(value);
}
inline void Torg12SellerTitleInfo::set_waybillnumber(const char* value, size_t size) {
  set_has_waybillnumber();
  if (waybillnumber_ == &::google::protobuf::internal::kEmptyString) {
    waybillnumber_ = new ::std::string;
  }
  waybillnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_waybillnumber() {
  set_has_waybillnumber();
  if (waybillnumber_ == &::google::protobuf::internal::kEmptyString) {
    waybillnumber_ = new ::std::string;
  }
  return waybillnumber_;
}
inline ::std::string* Torg12SellerTitleInfo::release_waybillnumber() {
  clear_has_waybillnumber();
  if (waybillnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = waybillnumber_;
    waybillnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string OperationCode = 12;
inline bool Torg12SellerTitleInfo::has_operationcode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_operationcode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Torg12SellerTitleInfo::clear_has_operationcode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Torg12SellerTitleInfo::clear_operationcode() {
  if (operationcode_ != &::google::protobuf::internal::kEmptyString) {
    operationcode_->clear();
  }
  clear_has_operationcode();
}
inline const ::std::string& Torg12SellerTitleInfo::operationcode() const {
  return *operationcode_;
}
inline void Torg12SellerTitleInfo::set_operationcode(const ::std::string& value) {
  set_has_operationcode();
  if (operationcode_ == &::google::protobuf::internal::kEmptyString) {
    operationcode_ = new ::std::string;
  }
  operationcode_->assign(value);
}
inline void Torg12SellerTitleInfo::set_operationcode(const char* value) {
  set_has_operationcode();
  if (operationcode_ == &::google::protobuf::internal::kEmptyString) {
    operationcode_ = new ::std::string;
  }
  operationcode_->assign(value);
}
inline void Torg12SellerTitleInfo::set_operationcode(const char* value, size_t size) {
  set_has_operationcode();
  if (operationcode_ == &::google::protobuf::internal::kEmptyString) {
    operationcode_ = new ::std::string;
  }
  operationcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_operationcode() {
  set_has_operationcode();
  if (operationcode_ == &::google::protobuf::internal::kEmptyString) {
    operationcode_ = new ::std::string;
  }
  return operationcode_;
}
inline ::std::string* Torg12SellerTitleInfo::release_operationcode() {
  clear_has_operationcode();
  if (operationcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = operationcode_;
    operationcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Diadoc.Api.Proto.Invoicing.Torg12Item Items = 13;
inline int Torg12SellerTitleInfo::items_size() const {
  return items_.size();
}
inline void Torg12SellerTitleInfo::clear_items() {
  items_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::Torg12Item& Torg12SellerTitleInfo::items(int index) const {
  return items_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Torg12Item* Torg12SellerTitleInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Torg12Item* Torg12SellerTitleInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Torg12Item >&
Torg12SellerTitleInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Torg12Item >*
Torg12SellerTitleInfo::mutable_items() {
  return &items_;
}

// optional string ParcelsQuantityTotal = 14;
inline bool Torg12SellerTitleInfo::has_parcelsquantitytotal() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_parcelsquantitytotal() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Torg12SellerTitleInfo::clear_has_parcelsquantitytotal() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Torg12SellerTitleInfo::clear_parcelsquantitytotal() {
  if (parcelsquantitytotal_ != &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotal_->clear();
  }
  clear_has_parcelsquantitytotal();
}
inline const ::std::string& Torg12SellerTitleInfo::parcelsquantitytotal() const {
  return *parcelsquantitytotal_;
}
inline void Torg12SellerTitleInfo::set_parcelsquantitytotal(const ::std::string& value) {
  set_has_parcelsquantitytotal();
  if (parcelsquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotal_ = new ::std::string;
  }
  parcelsquantitytotal_->assign(value);
}
inline void Torg12SellerTitleInfo::set_parcelsquantitytotal(const char* value) {
  set_has_parcelsquantitytotal();
  if (parcelsquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotal_ = new ::std::string;
  }
  parcelsquantitytotal_->assign(value);
}
inline void Torg12SellerTitleInfo::set_parcelsquantitytotal(const char* value, size_t size) {
  set_has_parcelsquantitytotal();
  if (parcelsquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotal_ = new ::std::string;
  }
  parcelsquantitytotal_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_parcelsquantitytotal() {
  set_has_parcelsquantitytotal();
  if (parcelsquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotal_ = new ::std::string;
  }
  return parcelsquantitytotal_;
}
inline ::std::string* Torg12SellerTitleInfo::release_parcelsquantitytotal() {
  clear_has_parcelsquantitytotal();
  if (parcelsquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parcelsquantitytotal_;
    parcelsquantitytotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ParcelsQuantityTotalInWords = 15;
inline bool Torg12SellerTitleInfo::has_parcelsquantitytotalinwords() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_parcelsquantitytotalinwords() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Torg12SellerTitleInfo::clear_has_parcelsquantitytotalinwords() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Torg12SellerTitleInfo::clear_parcelsquantitytotalinwords() {
  if (parcelsquantitytotalinwords_ != &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotalinwords_->clear();
  }
  clear_has_parcelsquantitytotalinwords();
}
inline const ::std::string& Torg12SellerTitleInfo::parcelsquantitytotalinwords() const {
  return *parcelsquantitytotalinwords_;
}
inline void Torg12SellerTitleInfo::set_parcelsquantitytotalinwords(const ::std::string& value) {
  set_has_parcelsquantitytotalinwords();
  if (parcelsquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotalinwords_ = new ::std::string;
  }
  parcelsquantitytotalinwords_->assign(value);
}
inline void Torg12SellerTitleInfo::set_parcelsquantitytotalinwords(const char* value) {
  set_has_parcelsquantitytotalinwords();
  if (parcelsquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotalinwords_ = new ::std::string;
  }
  parcelsquantitytotalinwords_->assign(value);
}
inline void Torg12SellerTitleInfo::set_parcelsquantitytotalinwords(const char* value, size_t size) {
  set_has_parcelsquantitytotalinwords();
  if (parcelsquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotalinwords_ = new ::std::string;
  }
  parcelsquantitytotalinwords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_parcelsquantitytotalinwords() {
  set_has_parcelsquantitytotalinwords();
  if (parcelsquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantitytotalinwords_ = new ::std::string;
  }
  return parcelsquantitytotalinwords_;
}
inline ::std::string* Torg12SellerTitleInfo::release_parcelsquantitytotalinwords() {
  clear_has_parcelsquantitytotalinwords();
  if (parcelsquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parcelsquantitytotalinwords_;
    parcelsquantitytotalinwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string GrossQuantityTotal = 16;
inline bool Torg12SellerTitleInfo::has_grossquantitytotal() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_grossquantitytotal() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Torg12SellerTitleInfo::clear_has_grossquantitytotal() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Torg12SellerTitleInfo::clear_grossquantitytotal() {
  if (grossquantitytotal_ != &::google::protobuf::internal::kEmptyString) {
    grossquantitytotal_->clear();
  }
  clear_has_grossquantitytotal();
}
inline const ::std::string& Torg12SellerTitleInfo::grossquantitytotal() const {
  return *grossquantitytotal_;
}
inline void Torg12SellerTitleInfo::set_grossquantitytotal(const ::std::string& value) {
  set_has_grossquantitytotal();
  if (grossquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    grossquantitytotal_ = new ::std::string;
  }
  grossquantitytotal_->assign(value);
}
inline void Torg12SellerTitleInfo::set_grossquantitytotal(const char* value) {
  set_has_grossquantitytotal();
  if (grossquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    grossquantitytotal_ = new ::std::string;
  }
  grossquantitytotal_->assign(value);
}
inline void Torg12SellerTitleInfo::set_grossquantitytotal(const char* value, size_t size) {
  set_has_grossquantitytotal();
  if (grossquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    grossquantitytotal_ = new ::std::string;
  }
  grossquantitytotal_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_grossquantitytotal() {
  set_has_grossquantitytotal();
  if (grossquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    grossquantitytotal_ = new ::std::string;
  }
  return grossquantitytotal_;
}
inline ::std::string* Torg12SellerTitleInfo::release_grossquantitytotal() {
  clear_has_grossquantitytotal();
  if (grossquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grossquantitytotal_;
    grossquantitytotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string GrossQuantityTotalInWords = 17;
inline bool Torg12SellerTitleInfo::has_grossquantitytotalinwords() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_grossquantitytotalinwords() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Torg12SellerTitleInfo::clear_has_grossquantitytotalinwords() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Torg12SellerTitleInfo::clear_grossquantitytotalinwords() {
  if (grossquantitytotalinwords_ != &::google::protobuf::internal::kEmptyString) {
    grossquantitytotalinwords_->clear();
  }
  clear_has_grossquantitytotalinwords();
}
inline const ::std::string& Torg12SellerTitleInfo::grossquantitytotalinwords() const {
  return *grossquantitytotalinwords_;
}
inline void Torg12SellerTitleInfo::set_grossquantitytotalinwords(const ::std::string& value) {
  set_has_grossquantitytotalinwords();
  if (grossquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    grossquantitytotalinwords_ = new ::std::string;
  }
  grossquantitytotalinwords_->assign(value);
}
inline void Torg12SellerTitleInfo::set_grossquantitytotalinwords(const char* value) {
  set_has_grossquantitytotalinwords();
  if (grossquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    grossquantitytotalinwords_ = new ::std::string;
  }
  grossquantitytotalinwords_->assign(value);
}
inline void Torg12SellerTitleInfo::set_grossquantitytotalinwords(const char* value, size_t size) {
  set_has_grossquantitytotalinwords();
  if (grossquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    grossquantitytotalinwords_ = new ::std::string;
  }
  grossquantitytotalinwords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_grossquantitytotalinwords() {
  set_has_grossquantitytotalinwords();
  if (grossquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    grossquantitytotalinwords_ = new ::std::string;
  }
  return grossquantitytotalinwords_;
}
inline ::std::string* Torg12SellerTitleInfo::release_grossquantitytotalinwords() {
  clear_has_grossquantitytotalinwords();
  if (grossquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grossquantitytotalinwords_;
    grossquantitytotalinwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string NetQuantityTotal = 18;
inline bool Torg12SellerTitleInfo::has_netquantitytotal() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_netquantitytotal() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Torg12SellerTitleInfo::clear_has_netquantitytotal() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Torg12SellerTitleInfo::clear_netquantitytotal() {
  if (netquantitytotal_ != &::google::protobuf::internal::kEmptyString) {
    netquantitytotal_->clear();
  }
  clear_has_netquantitytotal();
}
inline const ::std::string& Torg12SellerTitleInfo::netquantitytotal() const {
  return *netquantitytotal_;
}
inline void Torg12SellerTitleInfo::set_netquantitytotal(const ::std::string& value) {
  set_has_netquantitytotal();
  if (netquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    netquantitytotal_ = new ::std::string;
  }
  netquantitytotal_->assign(value);
}
inline void Torg12SellerTitleInfo::set_netquantitytotal(const char* value) {
  set_has_netquantitytotal();
  if (netquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    netquantitytotal_ = new ::std::string;
  }
  netquantitytotal_->assign(value);
}
inline void Torg12SellerTitleInfo::set_netquantitytotal(const char* value, size_t size) {
  set_has_netquantitytotal();
  if (netquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    netquantitytotal_ = new ::std::string;
  }
  netquantitytotal_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_netquantitytotal() {
  set_has_netquantitytotal();
  if (netquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    netquantitytotal_ = new ::std::string;
  }
  return netquantitytotal_;
}
inline ::std::string* Torg12SellerTitleInfo::release_netquantitytotal() {
  clear_has_netquantitytotal();
  if (netquantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = netquantitytotal_;
    netquantitytotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string NetQuantityTotalInWords = 19;
inline bool Torg12SellerTitleInfo::has_netquantitytotalinwords() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_netquantitytotalinwords() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Torg12SellerTitleInfo::clear_has_netquantitytotalinwords() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Torg12SellerTitleInfo::clear_netquantitytotalinwords() {
  if (netquantitytotalinwords_ != &::google::protobuf::internal::kEmptyString) {
    netquantitytotalinwords_->clear();
  }
  clear_has_netquantitytotalinwords();
}
inline const ::std::string& Torg12SellerTitleInfo::netquantitytotalinwords() const {
  return *netquantitytotalinwords_;
}
inline void Torg12SellerTitleInfo::set_netquantitytotalinwords(const ::std::string& value) {
  set_has_netquantitytotalinwords();
  if (netquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    netquantitytotalinwords_ = new ::std::string;
  }
  netquantitytotalinwords_->assign(value);
}
inline void Torg12SellerTitleInfo::set_netquantitytotalinwords(const char* value) {
  set_has_netquantitytotalinwords();
  if (netquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    netquantitytotalinwords_ = new ::std::string;
  }
  netquantitytotalinwords_->assign(value);
}
inline void Torg12SellerTitleInfo::set_netquantitytotalinwords(const char* value, size_t size) {
  set_has_netquantitytotalinwords();
  if (netquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    netquantitytotalinwords_ = new ::std::string;
  }
  netquantitytotalinwords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_netquantitytotalinwords() {
  set_has_netquantitytotalinwords();
  if (netquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    netquantitytotalinwords_ = new ::std::string;
  }
  return netquantitytotalinwords_;
}
inline ::std::string* Torg12SellerTitleInfo::release_netquantitytotalinwords() {
  clear_has_netquantitytotalinwords();
  if (netquantitytotalinwords_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = netquantitytotalinwords_;
    netquantitytotalinwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string QuantityTotal = 20;
inline bool Torg12SellerTitleInfo::has_quantitytotal() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_quantitytotal() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Torg12SellerTitleInfo::clear_has_quantitytotal() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Torg12SellerTitleInfo::clear_quantitytotal() {
  if (quantitytotal_ != &::google::protobuf::internal::kEmptyString) {
    quantitytotal_->clear();
  }
  clear_has_quantitytotal();
}
inline const ::std::string& Torg12SellerTitleInfo::quantitytotal() const {
  return *quantitytotal_;
}
inline void Torg12SellerTitleInfo::set_quantitytotal(const ::std::string& value) {
  set_has_quantitytotal();
  if (quantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    quantitytotal_ = new ::std::string;
  }
  quantitytotal_->assign(value);
}
inline void Torg12SellerTitleInfo::set_quantitytotal(const char* value) {
  set_has_quantitytotal();
  if (quantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    quantitytotal_ = new ::std::string;
  }
  quantitytotal_->assign(value);
}
inline void Torg12SellerTitleInfo::set_quantitytotal(const char* value, size_t size) {
  set_has_quantitytotal();
  if (quantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    quantitytotal_ = new ::std::string;
  }
  quantitytotal_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_quantitytotal() {
  set_has_quantitytotal();
  if (quantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    quantitytotal_ = new ::std::string;
  }
  return quantitytotal_;
}
inline ::std::string* Torg12SellerTitleInfo::release_quantitytotal() {
  clear_has_quantitytotal();
  if (quantitytotal_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quantitytotal_;
    quantitytotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string TotalWithVatExcluded = 21;
inline bool Torg12SellerTitleInfo::has_totalwithvatexcluded() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_totalwithvatexcluded() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Torg12SellerTitleInfo::clear_has_totalwithvatexcluded() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Torg12SellerTitleInfo::clear_totalwithvatexcluded() {
  if (totalwithvatexcluded_ != &::google::protobuf::internal::kEmptyString) {
    totalwithvatexcluded_->clear();
  }
  clear_has_totalwithvatexcluded();
}
inline const ::std::string& Torg12SellerTitleInfo::totalwithvatexcluded() const {
  return *totalwithvatexcluded_;
}
inline void Torg12SellerTitleInfo::set_totalwithvatexcluded(const ::std::string& value) {
  set_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    totalwithvatexcluded_ = new ::std::string;
  }
  totalwithvatexcluded_->assign(value);
}
inline void Torg12SellerTitleInfo::set_totalwithvatexcluded(const char* value) {
  set_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    totalwithvatexcluded_ = new ::std::string;
  }
  totalwithvatexcluded_->assign(value);
}
inline void Torg12SellerTitleInfo::set_totalwithvatexcluded(const char* value, size_t size) {
  set_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    totalwithvatexcluded_ = new ::std::string;
  }
  totalwithvatexcluded_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_totalwithvatexcluded() {
  set_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    totalwithvatexcluded_ = new ::std::string;
  }
  return totalwithvatexcluded_;
}
inline ::std::string* Torg12SellerTitleInfo::release_totalwithvatexcluded() {
  clear_has_totalwithvatexcluded();
  if (totalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totalwithvatexcluded_;
    totalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Vat = 22;
inline bool Torg12SellerTitleInfo::has_vat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_vat() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Torg12SellerTitleInfo::clear_has_vat() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Torg12SellerTitleInfo::clear_vat() {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& Torg12SellerTitleInfo::vat() const {
  return *vat_;
}
inline void Torg12SellerTitleInfo::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void Torg12SellerTitleInfo::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void Torg12SellerTitleInfo::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  return vat_;
}
inline ::std::string* Torg12SellerTitleInfo::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string Total = 23;
inline bool Torg12SellerTitleInfo::has_total() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_total() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Torg12SellerTitleInfo::clear_has_total() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Torg12SellerTitleInfo::clear_total() {
  if (total_ != &::google::protobuf::internal::kEmptyString) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& Torg12SellerTitleInfo::total() const {
  return *total_;
}
inline void Torg12SellerTitleInfo::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void Torg12SellerTitleInfo::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(value);
}
inline void Torg12SellerTitleInfo::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    total_ = new ::std::string;
  }
  return total_;
}
inline ::std::string* Torg12SellerTitleInfo::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string TotalInWords = 24;
inline bool Torg12SellerTitleInfo::has_totalinwords() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_totalinwords() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Torg12SellerTitleInfo::clear_has_totalinwords() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Torg12SellerTitleInfo::clear_totalinwords() {
  if (totalinwords_ != &::google::protobuf::internal::kEmptyString) {
    totalinwords_->clear();
  }
  clear_has_totalinwords();
}
inline const ::std::string& Torg12SellerTitleInfo::totalinwords() const {
  return *totalinwords_;
}
inline void Torg12SellerTitleInfo::set_totalinwords(const ::std::string& value) {
  set_has_totalinwords();
  if (totalinwords_ == &::google::protobuf::internal::kEmptyString) {
    totalinwords_ = new ::std::string;
  }
  totalinwords_->assign(value);
}
inline void Torg12SellerTitleInfo::set_totalinwords(const char* value) {
  set_has_totalinwords();
  if (totalinwords_ == &::google::protobuf::internal::kEmptyString) {
    totalinwords_ = new ::std::string;
  }
  totalinwords_->assign(value);
}
inline void Torg12SellerTitleInfo::set_totalinwords(const char* value, size_t size) {
  set_has_totalinwords();
  if (totalinwords_ == &::google::protobuf::internal::kEmptyString) {
    totalinwords_ = new ::std::string;
  }
  totalinwords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_totalinwords() {
  set_has_totalinwords();
  if (totalinwords_ == &::google::protobuf::internal::kEmptyString) {
    totalinwords_ = new ::std::string;
  }
  return totalinwords_;
}
inline ::std::string* Torg12SellerTitleInfo::release_totalinwords() {
  clear_has_totalinwords();
  if (totalinwords_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totalinwords_;
    totalinwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string SupplyDate = 25;
inline bool Torg12SellerTitleInfo::has_supplydate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_supplydate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Torg12SellerTitleInfo::clear_has_supplydate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Torg12SellerTitleInfo::clear_supplydate() {
  if (supplydate_ != &::google::protobuf::internal::kEmptyString) {
    supplydate_->clear();
  }
  clear_has_supplydate();
}
inline const ::std::string& Torg12SellerTitleInfo::supplydate() const {
  return *supplydate_;
}
inline void Torg12SellerTitleInfo::set_supplydate(const ::std::string& value) {
  set_has_supplydate();
  if (supplydate_ == &::google::protobuf::internal::kEmptyString) {
    supplydate_ = new ::std::string;
  }
  supplydate_->assign(value);
}
inline void Torg12SellerTitleInfo::set_supplydate(const char* value) {
  set_has_supplydate();
  if (supplydate_ == &::google::protobuf::internal::kEmptyString) {
    supplydate_ = new ::std::string;
  }
  supplydate_->assign(value);
}
inline void Torg12SellerTitleInfo::set_supplydate(const char* value, size_t size) {
  set_has_supplydate();
  if (supplydate_ == &::google::protobuf::internal::kEmptyString) {
    supplydate_ = new ::std::string;
  }
  supplydate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_supplydate() {
  set_has_supplydate();
  if (supplydate_ == &::google::protobuf::internal::kEmptyString) {
    supplydate_ = new ::std::string;
  }
  return supplydate_;
}
inline ::std::string* Torg12SellerTitleInfo::release_supplydate() {
  clear_has_supplydate();
  if (supplydate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = supplydate_;
    supplydate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Diadoc.Api.Proto.Invoicing.Official SupplyAllowedBy = 26;
inline bool Torg12SellerTitleInfo::has_supplyallowedby() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_supplyallowedby() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Torg12SellerTitleInfo::clear_has_supplyallowedby() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Torg12SellerTitleInfo::clear_supplyallowedby() {
  if (supplyallowedby_ != NULL) supplyallowedby_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
  clear_has_supplyallowedby();
}
inline const ::Diadoc::Api::Proto::Invoicing::Official& Torg12SellerTitleInfo::supplyallowedby() const {
  return supplyallowedby_ != NULL ? *supplyallowedby_ : *default_instance_->supplyallowedby_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12SellerTitleInfo::mutable_supplyallowedby() {
  set_has_supplyallowedby();
  if (supplyallowedby_ == NULL) supplyallowedby_ = new ::Diadoc::Api::Proto::Invoicing::Official;
  return supplyallowedby_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12SellerTitleInfo::release_supplyallowedby() {
  clear_has_supplyallowedby();
  ::Diadoc::Api::Proto::Invoicing::Official* temp = supplyallowedby_;
  supplyallowedby_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.Official SupplyPerformedBy = 27;
inline bool Torg12SellerTitleInfo::has_supplyperformedby() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_supplyperformedby() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Torg12SellerTitleInfo::clear_has_supplyperformedby() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Torg12SellerTitleInfo::clear_supplyperformedby() {
  if (supplyperformedby_ != NULL) supplyperformedby_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
  clear_has_supplyperformedby();
}
inline const ::Diadoc::Api::Proto::Invoicing::Official& Torg12SellerTitleInfo::supplyperformedby() const {
  return supplyperformedby_ != NULL ? *supplyperformedby_ : *default_instance_->supplyperformedby_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12SellerTitleInfo::mutable_supplyperformedby() {
  set_has_supplyperformedby();
  if (supplyperformedby_ == NULL) supplyperformedby_ = new ::Diadoc::Api::Proto::Invoicing::Official;
  return supplyperformedby_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12SellerTitleInfo::release_supplyperformedby() {
  clear_has_supplyperformedby();
  ::Diadoc::Api::Proto::Invoicing::Official* temp = supplyperformedby_;
  supplyperformedby_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.Official ChiefAccountant = 28;
inline bool Torg12SellerTitleInfo::has_chiefaccountant() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_chiefaccountant() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Torg12SellerTitleInfo::clear_has_chiefaccountant() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Torg12SellerTitleInfo::clear_chiefaccountant() {
  if (chiefaccountant_ != NULL) chiefaccountant_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
  clear_has_chiefaccountant();
}
inline const ::Diadoc::Api::Proto::Invoicing::Official& Torg12SellerTitleInfo::chiefaccountant() const {
  return chiefaccountant_ != NULL ? *chiefaccountant_ : *default_instance_->chiefaccountant_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12SellerTitleInfo::mutable_chiefaccountant() {
  set_has_chiefaccountant();
  if (chiefaccountant_ == NULL) chiefaccountant_ = new ::Diadoc::Api::Proto::Invoicing::Official;
  return chiefaccountant_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12SellerTitleInfo::release_chiefaccountant() {
  clear_has_chiefaccountant();
  ::Diadoc::Api::Proto::Invoicing::Official* temp = chiefaccountant_;
  chiefaccountant_ = NULL;
  return temp;
}

// required .Diadoc.Api.Proto.Invoicing.Signer Signer = 29;
inline bool Torg12SellerTitleInfo::has_signer() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_signer() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Torg12SellerTitleInfo::clear_has_signer() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Torg12SellerTitleInfo::clear_signer() {
  if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
  clear_has_signer();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signer& Torg12SellerTitleInfo::signer() const {
  return signer_ != NULL ? *signer_ : *default_instance_->signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* Torg12SellerTitleInfo::mutable_signer() {
  set_has_signer();
  if (signer_ == NULL) signer_ = new ::Diadoc::Api::Proto::Invoicing::Signer;
  return signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* Torg12SellerTitleInfo::release_signer() {
  clear_has_signer();
  ::Diadoc::Api::Proto::Invoicing::Signer* temp = signer_;
  signer_ = NULL;
  return temp;
}

// optional string AdditionalInfo = 30;
inline bool Torg12SellerTitleInfo::has_additionalinfo() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_additionalinfo() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Torg12SellerTitleInfo::clear_has_additionalinfo() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Torg12SellerTitleInfo::clear_additionalinfo() {
  if (additionalinfo_ != &::google::protobuf::internal::kEmptyString) {
    additionalinfo_->clear();
  }
  clear_has_additionalinfo();
}
inline const ::std::string& Torg12SellerTitleInfo::additionalinfo() const {
  return *additionalinfo_;
}
inline void Torg12SellerTitleInfo::set_additionalinfo(const ::std::string& value) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(value);
}
inline void Torg12SellerTitleInfo::set_additionalinfo(const char* value) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(value);
}
inline void Torg12SellerTitleInfo::set_additionalinfo(const char* value, size_t size) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_additionalinfo() {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  return additionalinfo_;
}
inline ::std::string* Torg12SellerTitleInfo::release_additionalinfo() {
  clear_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = additionalinfo_;
    additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string AttachmentSheetsQuantity = 31;
inline bool Torg12SellerTitleInfo::has_attachmentsheetsquantity() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Torg12SellerTitleInfo::set_has_attachmentsheetsquantity() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Torg12SellerTitleInfo::clear_has_attachmentsheetsquantity() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Torg12SellerTitleInfo::clear_attachmentsheetsquantity() {
  if (attachmentsheetsquantity_ != &::google::protobuf::internal::kEmptyString) {
    attachmentsheetsquantity_->clear();
  }
  clear_has_attachmentsheetsquantity();
}
inline const ::std::string& Torg12SellerTitleInfo::attachmentsheetsquantity() const {
  return *attachmentsheetsquantity_;
}
inline void Torg12SellerTitleInfo::set_attachmentsheetsquantity(const ::std::string& value) {
  set_has_attachmentsheetsquantity();
  if (attachmentsheetsquantity_ == &::google::protobuf::internal::kEmptyString) {
    attachmentsheetsquantity_ = new ::std::string;
  }
  attachmentsheetsquantity_->assign(value);
}
inline void Torg12SellerTitleInfo::set_attachmentsheetsquantity(const char* value) {
  set_has_attachmentsheetsquantity();
  if (attachmentsheetsquantity_ == &::google::protobuf::internal::kEmptyString) {
    attachmentsheetsquantity_ = new ::std::string;
  }
  attachmentsheetsquantity_->assign(value);
}
inline void Torg12SellerTitleInfo::set_attachmentsheetsquantity(const char* value, size_t size) {
  set_has_attachmentsheetsquantity();
  if (attachmentsheetsquantity_ == &::google::protobuf::internal::kEmptyString) {
    attachmentsheetsquantity_ = new ::std::string;
  }
  attachmentsheetsquantity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12SellerTitleInfo::mutable_attachmentsheetsquantity() {
  set_has_attachmentsheetsquantity();
  if (attachmentsheetsquantity_ == &::google::protobuf::internal::kEmptyString) {
    attachmentsheetsquantity_ = new ::std::string;
  }
  return attachmentsheetsquantity_;
}
inline ::std::string* Torg12SellerTitleInfo::release_attachmentsheetsquantity() {
  clear_has_attachmentsheetsquantity();
  if (attachmentsheetsquantity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attachmentsheetsquantity_;
    attachmentsheetsquantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Torg12BuyerTitleInfo

// required string ShipmentReceiptDate = 1;
inline bool Torg12BuyerTitleInfo::has_shipmentreceiptdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Torg12BuyerTitleInfo::set_has_shipmentreceiptdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Torg12BuyerTitleInfo::clear_has_shipmentreceiptdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Torg12BuyerTitleInfo::clear_shipmentreceiptdate() {
  if (shipmentreceiptdate_ != &::google::protobuf::internal::kEmptyString) {
    shipmentreceiptdate_->clear();
  }
  clear_has_shipmentreceiptdate();
}
inline const ::std::string& Torg12BuyerTitleInfo::shipmentreceiptdate() const {
  return *shipmentreceiptdate_;
}
inline void Torg12BuyerTitleInfo::set_shipmentreceiptdate(const ::std::string& value) {
  set_has_shipmentreceiptdate();
  if (shipmentreceiptdate_ == &::google::protobuf::internal::kEmptyString) {
    shipmentreceiptdate_ = new ::std::string;
  }
  shipmentreceiptdate_->assign(value);
}
inline void Torg12BuyerTitleInfo::set_shipmentreceiptdate(const char* value) {
  set_has_shipmentreceiptdate();
  if (shipmentreceiptdate_ == &::google::protobuf::internal::kEmptyString) {
    shipmentreceiptdate_ = new ::std::string;
  }
  shipmentreceiptdate_->assign(value);
}
inline void Torg12BuyerTitleInfo::set_shipmentreceiptdate(const char* value, size_t size) {
  set_has_shipmentreceiptdate();
  if (shipmentreceiptdate_ == &::google::protobuf::internal::kEmptyString) {
    shipmentreceiptdate_ = new ::std::string;
  }
  shipmentreceiptdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12BuyerTitleInfo::mutable_shipmentreceiptdate() {
  set_has_shipmentreceiptdate();
  if (shipmentreceiptdate_ == &::google::protobuf::internal::kEmptyString) {
    shipmentreceiptdate_ = new ::std::string;
  }
  return shipmentreceiptdate_;
}
inline ::std::string* Torg12BuyerTitleInfo::release_shipmentreceiptdate() {
  clear_has_shipmentreceiptdate();
  if (shipmentreceiptdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shipmentreceiptdate_;
    shipmentreceiptdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Diadoc.Api.Proto.Invoicing.Attorney Attorney = 2;
inline bool Torg12BuyerTitleInfo::has_attorney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Torg12BuyerTitleInfo::set_has_attorney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Torg12BuyerTitleInfo::clear_has_attorney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Torg12BuyerTitleInfo::clear_attorney() {
  if (attorney_ != NULL) attorney_->::Diadoc::Api::Proto::Invoicing::Attorney::Clear();
  clear_has_attorney();
}
inline const ::Diadoc::Api::Proto::Invoicing::Attorney& Torg12BuyerTitleInfo::attorney() const {
  return attorney_ != NULL ? *attorney_ : *default_instance_->attorney_;
}
inline ::Diadoc::Api::Proto::Invoicing::Attorney* Torg12BuyerTitleInfo::mutable_attorney() {
  set_has_attorney();
  if (attorney_ == NULL) attorney_ = new ::Diadoc::Api::Proto::Invoicing::Attorney;
  return attorney_;
}
inline ::Diadoc::Api::Proto::Invoicing::Attorney* Torg12BuyerTitleInfo::release_attorney() {
  clear_has_attorney();
  ::Diadoc::Api::Proto::Invoicing::Attorney* temp = attorney_;
  attorney_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.Official AcceptedBy = 3;
inline bool Torg12BuyerTitleInfo::has_acceptedby() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Torg12BuyerTitleInfo::set_has_acceptedby() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Torg12BuyerTitleInfo::clear_has_acceptedby() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Torg12BuyerTitleInfo::clear_acceptedby() {
  if (acceptedby_ != NULL) acceptedby_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
  clear_has_acceptedby();
}
inline const ::Diadoc::Api::Proto::Invoicing::Official& Torg12BuyerTitleInfo::acceptedby() const {
  return acceptedby_ != NULL ? *acceptedby_ : *default_instance_->acceptedby_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12BuyerTitleInfo::mutable_acceptedby() {
  set_has_acceptedby();
  if (acceptedby_ == NULL) acceptedby_ = new ::Diadoc::Api::Proto::Invoicing::Official;
  return acceptedby_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12BuyerTitleInfo::release_acceptedby() {
  clear_has_acceptedby();
  ::Diadoc::Api::Proto::Invoicing::Official* temp = acceptedby_;
  acceptedby_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.Invoicing.Official ReceivedBy = 4;
inline bool Torg12BuyerTitleInfo::has_receivedby() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Torg12BuyerTitleInfo::set_has_receivedby() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Torg12BuyerTitleInfo::clear_has_receivedby() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Torg12BuyerTitleInfo::clear_receivedby() {
  if (receivedby_ != NULL) receivedby_->::Diadoc::Api::Proto::Invoicing::Official::Clear();
  clear_has_receivedby();
}
inline const ::Diadoc::Api::Proto::Invoicing::Official& Torg12BuyerTitleInfo::receivedby() const {
  return receivedby_ != NULL ? *receivedby_ : *default_instance_->receivedby_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12BuyerTitleInfo::mutable_receivedby() {
  set_has_receivedby();
  if (receivedby_ == NULL) receivedby_ = new ::Diadoc::Api::Proto::Invoicing::Official;
  return receivedby_;
}
inline ::Diadoc::Api::Proto::Invoicing::Official* Torg12BuyerTitleInfo::release_receivedby() {
  clear_has_receivedby();
  ::Diadoc::Api::Proto::Invoicing::Official* temp = receivedby_;
  receivedby_ = NULL;
  return temp;
}

// required .Diadoc.Api.Proto.Invoicing.Signer Signer = 5;
inline bool Torg12BuyerTitleInfo::has_signer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Torg12BuyerTitleInfo::set_has_signer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Torg12BuyerTitleInfo::clear_has_signer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Torg12BuyerTitleInfo::clear_signer() {
  if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
  clear_has_signer();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signer& Torg12BuyerTitleInfo::signer() const {
  return signer_ != NULL ? *signer_ : *default_instance_->signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* Torg12BuyerTitleInfo::mutable_signer() {
  set_has_signer();
  if (signer_ == NULL) signer_ = new ::Diadoc::Api::Proto::Invoicing::Signer;
  return signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* Torg12BuyerTitleInfo::release_signer() {
  clear_has_signer();
  ::Diadoc::Api::Proto::Invoicing::Signer* temp = signer_;
  signer_ = NULL;
  return temp;
}

// optional string AdditionalInfo = 6;
inline bool Torg12BuyerTitleInfo::has_additionalinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Torg12BuyerTitleInfo::set_has_additionalinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Torg12BuyerTitleInfo::clear_has_additionalinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Torg12BuyerTitleInfo::clear_additionalinfo() {
  if (additionalinfo_ != &::google::protobuf::internal::kEmptyString) {
    additionalinfo_->clear();
  }
  clear_has_additionalinfo();
}
inline const ::std::string& Torg12BuyerTitleInfo::additionalinfo() const {
  return *additionalinfo_;
}
inline void Torg12BuyerTitleInfo::set_additionalinfo(const ::std::string& value) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(value);
}
inline void Torg12BuyerTitleInfo::set_additionalinfo(const char* value) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(value);
}
inline void Torg12BuyerTitleInfo::set_additionalinfo(const char* value, size_t size) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12BuyerTitleInfo::mutable_additionalinfo() {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  return additionalinfo_;
}
inline ::std::string* Torg12BuyerTitleInfo::release_additionalinfo() {
  clear_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = additionalinfo_;
    additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Torg12Item

// required string Name = 1;
inline bool Torg12Item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Torg12Item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Torg12Item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Torg12Item::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Torg12Item::name() const {
  return *name_;
}
inline void Torg12Item::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Torg12Item::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Torg12Item::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Torg12Item::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Feature = 2;
inline bool Torg12Item::has_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Torg12Item::set_has_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Torg12Item::clear_has_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Torg12Item::clear_feature() {
  if (feature_ != &::google::protobuf::internal::kEmptyString) {
    feature_->clear();
  }
  clear_has_feature();
}
inline const ::std::string& Torg12Item::feature() const {
  return *feature_;
}
inline void Torg12Item::set_feature(const ::std::string& value) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    feature_ = new ::std::string;
  }
  feature_->assign(value);
}
inline void Torg12Item::set_feature(const char* value) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    feature_ = new ::std::string;
  }
  feature_->assign(value);
}
inline void Torg12Item::set_feature(const char* value, size_t size) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    feature_ = new ::std::string;
  }
  feature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_feature() {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    feature_ = new ::std::string;
  }
  return feature_;
}
inline ::std::string* Torg12Item::release_feature() {
  clear_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = feature_;
    feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Sort = 3;
inline bool Torg12Item::has_sort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Torg12Item::set_has_sort() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Torg12Item::clear_has_sort() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Torg12Item::clear_sort() {
  if (sort_ != &::google::protobuf::internal::kEmptyString) {
    sort_->clear();
  }
  clear_has_sort();
}
inline const ::std::string& Torg12Item::sort() const {
  return *sort_;
}
inline void Torg12Item::set_sort(const ::std::string& value) {
  set_has_sort();
  if (sort_ == &::google::protobuf::internal::kEmptyString) {
    sort_ = new ::std::string;
  }
  sort_->assign(value);
}
inline void Torg12Item::set_sort(const char* value) {
  set_has_sort();
  if (sort_ == &::google::protobuf::internal::kEmptyString) {
    sort_ = new ::std::string;
  }
  sort_->assign(value);
}
inline void Torg12Item::set_sort(const char* value, size_t size) {
  set_has_sort();
  if (sort_ == &::google::protobuf::internal::kEmptyString) {
    sort_ = new ::std::string;
  }
  sort_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_sort() {
  set_has_sort();
  if (sort_ == &::google::protobuf::internal::kEmptyString) {
    sort_ = new ::std::string;
  }
  return sort_;
}
inline ::std::string* Torg12Item::release_sort() {
  clear_has_sort();
  if (sort_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sort_;
    sort_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string NomenclatureArticle = 4;
inline bool Torg12Item::has_nomenclaturearticle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Torg12Item::set_has_nomenclaturearticle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Torg12Item::clear_has_nomenclaturearticle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Torg12Item::clear_nomenclaturearticle() {
  if (nomenclaturearticle_ != &::google::protobuf::internal::kEmptyString) {
    nomenclaturearticle_->clear();
  }
  clear_has_nomenclaturearticle();
}
inline const ::std::string& Torg12Item::nomenclaturearticle() const {
  return *nomenclaturearticle_;
}
inline void Torg12Item::set_nomenclaturearticle(const ::std::string& value) {
  set_has_nomenclaturearticle();
  if (nomenclaturearticle_ == &::google::protobuf::internal::kEmptyString) {
    nomenclaturearticle_ = new ::std::string;
  }
  nomenclaturearticle_->assign(value);
}
inline void Torg12Item::set_nomenclaturearticle(const char* value) {
  set_has_nomenclaturearticle();
  if (nomenclaturearticle_ == &::google::protobuf::internal::kEmptyString) {
    nomenclaturearticle_ = new ::std::string;
  }
  nomenclaturearticle_->assign(value);
}
inline void Torg12Item::set_nomenclaturearticle(const char* value, size_t size) {
  set_has_nomenclaturearticle();
  if (nomenclaturearticle_ == &::google::protobuf::internal::kEmptyString) {
    nomenclaturearticle_ = new ::std::string;
  }
  nomenclaturearticle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_nomenclaturearticle() {
  set_has_nomenclaturearticle();
  if (nomenclaturearticle_ == &::google::protobuf::internal::kEmptyString) {
    nomenclaturearticle_ = new ::std::string;
  }
  return nomenclaturearticle_;
}
inline ::std::string* Torg12Item::release_nomenclaturearticle() {
  clear_has_nomenclaturearticle();
  if (nomenclaturearticle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nomenclaturearticle_;
    nomenclaturearticle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Code = 5;
inline bool Torg12Item::has_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Torg12Item::set_has_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Torg12Item::clear_has_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Torg12Item::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& Torg12Item::code() const {
  return *code_;
}
inline void Torg12Item::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Torg12Item::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Torg12Item::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* Torg12Item::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string UnitCode = 6;
inline bool Torg12Item::has_unitcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Torg12Item::set_has_unitcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Torg12Item::clear_has_unitcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Torg12Item::clear_unitcode() {
  if (unitcode_ != &::google::protobuf::internal::kEmptyString) {
    unitcode_->clear();
  }
  clear_has_unitcode();
}
inline const ::std::string& Torg12Item::unitcode() const {
  return *unitcode_;
}
inline void Torg12Item::set_unitcode(const ::std::string& value) {
  set_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::kEmptyString) {
    unitcode_ = new ::std::string;
  }
  unitcode_->assign(value);
}
inline void Torg12Item::set_unitcode(const char* value) {
  set_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::kEmptyString) {
    unitcode_ = new ::std::string;
  }
  unitcode_->assign(value);
}
inline void Torg12Item::set_unitcode(const char* value, size_t size) {
  set_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::kEmptyString) {
    unitcode_ = new ::std::string;
  }
  unitcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_unitcode() {
  set_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::kEmptyString) {
    unitcode_ = new ::std::string;
  }
  return unitcode_;
}
inline ::std::string* Torg12Item::release_unitcode() {
  clear_has_unitcode();
  if (unitcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitcode_;
    unitcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string UnitName = 7;
inline bool Torg12Item::has_unitname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Torg12Item::set_has_unitname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Torg12Item::clear_has_unitname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Torg12Item::clear_unitname() {
  if (unitname_ != &::google::protobuf::internal::kEmptyString) {
    unitname_->clear();
  }
  clear_has_unitname();
}
inline const ::std::string& Torg12Item::unitname() const {
  return *unitname_;
}
inline void Torg12Item::set_unitname(const ::std::string& value) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void Torg12Item::set_unitname(const char* value) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(value);
}
inline void Torg12Item::set_unitname(const char* value, size_t size) {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  unitname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_unitname() {
  set_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    unitname_ = new ::std::string;
  }
  return unitname_;
}
inline ::std::string* Torg12Item::release_unitname() {
  clear_has_unitname();
  if (unitname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitname_;
    unitname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ParcelType = 8;
inline bool Torg12Item::has_parceltype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Torg12Item::set_has_parceltype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Torg12Item::clear_has_parceltype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Torg12Item::clear_parceltype() {
  if (parceltype_ != &::google::protobuf::internal::kEmptyString) {
    parceltype_->clear();
  }
  clear_has_parceltype();
}
inline const ::std::string& Torg12Item::parceltype() const {
  return *parceltype_;
}
inline void Torg12Item::set_parceltype(const ::std::string& value) {
  set_has_parceltype();
  if (parceltype_ == &::google::protobuf::internal::kEmptyString) {
    parceltype_ = new ::std::string;
  }
  parceltype_->assign(value);
}
inline void Torg12Item::set_parceltype(const char* value) {
  set_has_parceltype();
  if (parceltype_ == &::google::protobuf::internal::kEmptyString) {
    parceltype_ = new ::std::string;
  }
  parceltype_->assign(value);
}
inline void Torg12Item::set_parceltype(const char* value, size_t size) {
  set_has_parceltype();
  if (parceltype_ == &::google::protobuf::internal::kEmptyString) {
    parceltype_ = new ::std::string;
  }
  parceltype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_parceltype() {
  set_has_parceltype();
  if (parceltype_ == &::google::protobuf::internal::kEmptyString) {
    parceltype_ = new ::std::string;
  }
  return parceltype_;
}
inline ::std::string* Torg12Item::release_parceltype() {
  clear_has_parceltype();
  if (parceltype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parceltype_;
    parceltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ParcelCapacity = 9;
inline bool Torg12Item::has_parcelcapacity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Torg12Item::set_has_parcelcapacity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Torg12Item::clear_has_parcelcapacity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Torg12Item::clear_parcelcapacity() {
  if (parcelcapacity_ != &::google::protobuf::internal::kEmptyString) {
    parcelcapacity_->clear();
  }
  clear_has_parcelcapacity();
}
inline const ::std::string& Torg12Item::parcelcapacity() const {
  return *parcelcapacity_;
}
inline void Torg12Item::set_parcelcapacity(const ::std::string& value) {
  set_has_parcelcapacity();
  if (parcelcapacity_ == &::google::protobuf::internal::kEmptyString) {
    parcelcapacity_ = new ::std::string;
  }
  parcelcapacity_->assign(value);
}
inline void Torg12Item::set_parcelcapacity(const char* value) {
  set_has_parcelcapacity();
  if (parcelcapacity_ == &::google::protobuf::internal::kEmptyString) {
    parcelcapacity_ = new ::std::string;
  }
  parcelcapacity_->assign(value);
}
inline void Torg12Item::set_parcelcapacity(const char* value, size_t size) {
  set_has_parcelcapacity();
  if (parcelcapacity_ == &::google::protobuf::internal::kEmptyString) {
    parcelcapacity_ = new ::std::string;
  }
  parcelcapacity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_parcelcapacity() {
  set_has_parcelcapacity();
  if (parcelcapacity_ == &::google::protobuf::internal::kEmptyString) {
    parcelcapacity_ = new ::std::string;
  }
  return parcelcapacity_;
}
inline ::std::string* Torg12Item::release_parcelcapacity() {
  clear_has_parcelcapacity();
  if (parcelcapacity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parcelcapacity_;
    parcelcapacity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ParcelsQuantity = 10;
inline bool Torg12Item::has_parcelsquantity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Torg12Item::set_has_parcelsquantity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Torg12Item::clear_has_parcelsquantity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Torg12Item::clear_parcelsquantity() {
  if (parcelsquantity_ != &::google::protobuf::internal::kEmptyString) {
    parcelsquantity_->clear();
  }
  clear_has_parcelsquantity();
}
inline const ::std::string& Torg12Item::parcelsquantity() const {
  return *parcelsquantity_;
}
inline void Torg12Item::set_parcelsquantity(const ::std::string& value) {
  set_has_parcelsquantity();
  if (parcelsquantity_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantity_ = new ::std::string;
  }
  parcelsquantity_->assign(value);
}
inline void Torg12Item::set_parcelsquantity(const char* value) {
  set_has_parcelsquantity();
  if (parcelsquantity_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantity_ = new ::std::string;
  }
  parcelsquantity_->assign(value);
}
inline void Torg12Item::set_parcelsquantity(const char* value, size_t size) {
  set_has_parcelsquantity();
  if (parcelsquantity_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantity_ = new ::std::string;
  }
  parcelsquantity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_parcelsquantity() {
  set_has_parcelsquantity();
  if (parcelsquantity_ == &::google::protobuf::internal::kEmptyString) {
    parcelsquantity_ = new ::std::string;
  }
  return parcelsquantity_;
}
inline ::std::string* Torg12Item::release_parcelsquantity() {
  clear_has_parcelsquantity();
  if (parcelsquantity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parcelsquantity_;
    parcelsquantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string GrossQuantity = 11;
inline bool Torg12Item::has_grossquantity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Torg12Item::set_has_grossquantity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Torg12Item::clear_has_grossquantity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Torg12Item::clear_grossquantity() {
  if (grossquantity_ != &::google::protobuf::internal::kEmptyString) {
    grossquantity_->clear();
  }
  clear_has_grossquantity();
}
inline const ::std::string& Torg12Item::grossquantity() const {
  return *grossquantity_;
}
inline void Torg12Item::set_grossquantity(const ::std::string& value) {
  set_has_grossquantity();
  if (grossquantity_ == &::google::protobuf::internal::kEmptyString) {
    grossquantity_ = new ::std::string;
  }
  grossquantity_->assign(value);
}
inline void Torg12Item::set_grossquantity(const char* value) {
  set_has_grossquantity();
  if (grossquantity_ == &::google::protobuf::internal::kEmptyString) {
    grossquantity_ = new ::std::string;
  }
  grossquantity_->assign(value);
}
inline void Torg12Item::set_grossquantity(const char* value, size_t size) {
  set_has_grossquantity();
  if (grossquantity_ == &::google::protobuf::internal::kEmptyString) {
    grossquantity_ = new ::std::string;
  }
  grossquantity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_grossquantity() {
  set_has_grossquantity();
  if (grossquantity_ == &::google::protobuf::internal::kEmptyString) {
    grossquantity_ = new ::std::string;
  }
  return grossquantity_;
}
inline ::std::string* Torg12Item::release_grossquantity() {
  clear_has_grossquantity();
  if (grossquantity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grossquantity_;
    grossquantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string Quantity = 12;
inline bool Torg12Item::has_quantity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Torg12Item::set_has_quantity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Torg12Item::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Torg12Item::clear_quantity() {
  if (quantity_ != &::google::protobuf::internal::kEmptyString) {
    quantity_->clear();
  }
  clear_has_quantity();
}
inline const ::std::string& Torg12Item::quantity() const {
  return *quantity_;
}
inline void Torg12Item::set_quantity(const ::std::string& value) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::kEmptyString) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(value);
}
inline void Torg12Item::set_quantity(const char* value) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::kEmptyString) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(value);
}
inline void Torg12Item::set_quantity(const char* value, size_t size) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::kEmptyString) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_quantity() {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::kEmptyString) {
    quantity_ = new ::std::string;
  }
  return quantity_;
}
inline ::std::string* Torg12Item::release_quantity() {
  clear_has_quantity();
  if (quantity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quantity_;
    quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Price = 13;
inline bool Torg12Item::has_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Torg12Item::set_has_price() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Torg12Item::clear_has_price() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Torg12Item::clear_price() {
  if (price_ != &::google::protobuf::internal::kEmptyString) {
    price_->clear();
  }
  clear_has_price();
}
inline const ::std::string& Torg12Item::price() const {
  return *price_;
}
inline void Torg12Item::set_price(const ::std::string& value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(value);
}
inline void Torg12Item::set_price(const char* value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(value);
}
inline void Torg12Item::set_price(const char* value, size_t size) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_price() {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  return price_;
}
inline ::std::string* Torg12Item::release_price() {
  clear_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = price_;
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string TaxRate = 14;
inline bool Torg12Item::has_taxrate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Torg12Item::set_has_taxrate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Torg12Item::clear_has_taxrate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Torg12Item::clear_taxrate() {
  if (taxrate_ != &::google::protobuf::internal::kEmptyString) {
    taxrate_->clear();
  }
  clear_has_taxrate();
}
inline const ::std::string& Torg12Item::taxrate() const {
  return *taxrate_;
}
inline void Torg12Item::set_taxrate(const ::std::string& value) {
  set_has_taxrate();
  if (taxrate_ == &::google::protobuf::internal::kEmptyString) {
    taxrate_ = new ::std::string;
  }
  taxrate_->assign(value);
}
inline void Torg12Item::set_taxrate(const char* value) {
  set_has_taxrate();
  if (taxrate_ == &::google::protobuf::internal::kEmptyString) {
    taxrate_ = new ::std::string;
  }
  taxrate_->assign(value);
}
inline void Torg12Item::set_taxrate(const char* value, size_t size) {
  set_has_taxrate();
  if (taxrate_ == &::google::protobuf::internal::kEmptyString) {
    taxrate_ = new ::std::string;
  }
  taxrate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_taxrate() {
  set_has_taxrate();
  if (taxrate_ == &::google::protobuf::internal::kEmptyString) {
    taxrate_ = new ::std::string;
  }
  return taxrate_;
}
inline ::std::string* Torg12Item::release_taxrate() {
  clear_has_taxrate();
  if (taxrate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taxrate_;
    taxrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string SubtotalWithVatExcluded = 15;
inline bool Torg12Item::has_subtotalwithvatexcluded() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Torg12Item::set_has_subtotalwithvatexcluded() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Torg12Item::clear_has_subtotalwithvatexcluded() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Torg12Item::clear_subtotalwithvatexcluded() {
  if (subtotalwithvatexcluded_ != &::google::protobuf::internal::kEmptyString) {
    subtotalwithvatexcluded_->clear();
  }
  clear_has_subtotalwithvatexcluded();
}
inline const ::std::string& Torg12Item::subtotalwithvatexcluded() const {
  return *subtotalwithvatexcluded_;
}
inline void Torg12Item::set_subtotalwithvatexcluded(const ::std::string& value) {
  set_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    subtotalwithvatexcluded_ = new ::std::string;
  }
  subtotalwithvatexcluded_->assign(value);
}
inline void Torg12Item::set_subtotalwithvatexcluded(const char* value) {
  set_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    subtotalwithvatexcluded_ = new ::std::string;
  }
  subtotalwithvatexcluded_->assign(value);
}
inline void Torg12Item::set_subtotalwithvatexcluded(const char* value, size_t size) {
  set_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    subtotalwithvatexcluded_ = new ::std::string;
  }
  subtotalwithvatexcluded_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_subtotalwithvatexcluded() {
  set_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    subtotalwithvatexcluded_ = new ::std::string;
  }
  return subtotalwithvatexcluded_;
}
inline ::std::string* Torg12Item::release_subtotalwithvatexcluded() {
  clear_has_subtotalwithvatexcluded();
  if (subtotalwithvatexcluded_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subtotalwithvatexcluded_;
    subtotalwithvatexcluded_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Vat = 16;
inline bool Torg12Item::has_vat() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Torg12Item::set_has_vat() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Torg12Item::clear_has_vat() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Torg12Item::clear_vat() {
  if (vat_ != &::google::protobuf::internal::kEmptyString) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& Torg12Item::vat() const {
  return *vat_;
}
inline void Torg12Item::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void Torg12Item::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
}
inline void Torg12Item::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    vat_ = new ::std::string;
  }
  return vat_;
}
inline ::std::string* Torg12Item::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string Subtotal = 17;
inline bool Torg12Item::has_subtotal() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Torg12Item::set_has_subtotal() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Torg12Item::clear_has_subtotal() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Torg12Item::clear_subtotal() {
  if (subtotal_ != &::google::protobuf::internal::kEmptyString) {
    subtotal_->clear();
  }
  clear_has_subtotal();
}
inline const ::std::string& Torg12Item::subtotal() const {
  return *subtotal_;
}
inline void Torg12Item::set_subtotal(const ::std::string& value) {
  set_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::kEmptyString) {
    subtotal_ = new ::std::string;
  }
  subtotal_->assign(value);
}
inline void Torg12Item::set_subtotal(const char* value) {
  set_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::kEmptyString) {
    subtotal_ = new ::std::string;
  }
  subtotal_->assign(value);
}
inline void Torg12Item::set_subtotal(const char* value, size_t size) {
  set_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::kEmptyString) {
    subtotal_ = new ::std::string;
  }
  subtotal_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_subtotal() {
  set_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::kEmptyString) {
    subtotal_ = new ::std::string;
  }
  return subtotal_;
}
inline ::std::string* Torg12Item::release_subtotal() {
  clear_has_subtotal();
  if (subtotal_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subtotal_;
    subtotal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string AdditionalInfo = 18;
inline bool Torg12Item::has_additionalinfo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Torg12Item::set_has_additionalinfo() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Torg12Item::clear_has_additionalinfo() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Torg12Item::clear_additionalinfo() {
  if (additionalinfo_ != &::google::protobuf::internal::kEmptyString) {
    additionalinfo_->clear();
  }
  clear_has_additionalinfo();
}
inline const ::std::string& Torg12Item::additionalinfo() const {
  return *additionalinfo_;
}
inline void Torg12Item::set_additionalinfo(const ::std::string& value) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(value);
}
inline void Torg12Item::set_additionalinfo(const char* value) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(value);
}
inline void Torg12Item::set_additionalinfo(const char* value, size_t size) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Torg12Item::mutable_additionalinfo() {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  return additionalinfo_;
}
inline ::std::string* Torg12Item::release_additionalinfo() {
  clear_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = additionalinfo_;
    additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Grounds

// optional string DocumentName = 1;
inline bool Grounds::has_documentname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Grounds::set_has_documentname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Grounds::clear_has_documentname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Grounds::clear_documentname() {
  if (documentname_ != &::google::protobuf::internal::kEmptyString) {
    documentname_->clear();
  }
  clear_has_documentname();
}
inline const ::std::string& Grounds::documentname() const {
  return *documentname_;
}
inline void Grounds::set_documentname(const ::std::string& value) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::kEmptyString) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(value);
}
inline void Grounds::set_documentname(const char* value) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::kEmptyString) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(value);
}
inline void Grounds::set_documentname(const char* value, size_t size) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::kEmptyString) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Grounds::mutable_documentname() {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::kEmptyString) {
    documentname_ = new ::std::string;
  }
  return documentname_;
}
inline ::std::string* Grounds::release_documentname() {
  clear_has_documentname();
  if (documentname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentname_;
    documentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string DocumentNumber = 2;
inline bool Grounds::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Grounds::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Grounds::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Grounds::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::kEmptyString) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& Grounds::documentnumber() const {
  return *documentnumber_;
}
inline void Grounds::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
}
inline void Grounds::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
}
inline void Grounds::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Grounds::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    documentnumber_ = new ::std::string;
  }
  return documentnumber_;
}
inline ::std::string* Grounds::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string DocumentDate = 3;
inline bool Grounds::has_documentdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Grounds::set_has_documentdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Grounds::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Grounds::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::kEmptyString) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& Grounds::documentdate() const {
  return *documentdate_;
}
inline void Grounds::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
}
inline void Grounds::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
}
inline void Grounds::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Grounds::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    documentdate_ = new ::std::string;
  }
  return documentdate_;
}
inline ::std::string* Grounds::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string AdditionalInfo = 4;
inline bool Grounds::has_additionalinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Grounds::set_has_additionalinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Grounds::clear_has_additionalinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Grounds::clear_additionalinfo() {
  if (additionalinfo_ != &::google::protobuf::internal::kEmptyString) {
    additionalinfo_->clear();
  }
  clear_has_additionalinfo();
}
inline const ::std::string& Grounds::additionalinfo() const {
  return *additionalinfo_;
}
inline void Grounds::set_additionalinfo(const ::std::string& value) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(value);
}
inline void Grounds::set_additionalinfo(const char* value) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(value);
}
inline void Grounds::set_additionalinfo(const char* value, size_t size) {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  additionalinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Grounds::mutable_additionalinfo() {
  set_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    additionalinfo_ = new ::std::string;
  }
  return additionalinfo_;
}
inline ::std::string* Grounds::release_additionalinfo() {
  clear_has_additionalinfo();
  if (additionalinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = additionalinfo_;
    additionalinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Invoicing_2fTorg12Info_2eproto__INCLUDED
