// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Counteragent.proto

#ifndef PROTOBUF_Counteragent_2eproto__INCLUDED
#define PROTOBUF_Counteragent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Organization.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Counteragent_2eproto();
void protobuf_AssignDesc_Counteragent_2eproto();
void protobuf_ShutdownFile_Counteragent_2eproto();

class CounteragentList;
class Counteragent;
class CounteragentCertificateList;
class Certificate;

enum CounteragentStatus {
  UnknownCounteragentStatus = 0,
  IsMyCounteragent = 1,
  InvitesMe = 2,
  IsInvitedByMe = 3,
  RejectsMe = 5,
  IsRejectedByMe = 6,
  NotInCounteragentList = 7
};
bool CounteragentStatus_IsValid(int value);
const CounteragentStatus CounteragentStatus_MIN = UnknownCounteragentStatus;
const CounteragentStatus CounteragentStatus_MAX = NotInCounteragentList;
const int CounteragentStatus_ARRAYSIZE = CounteragentStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CounteragentStatus_descriptor();
inline const ::std::string& CounteragentStatus_Name(CounteragentStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CounteragentStatus_descriptor(), value);
}
inline bool CounteragentStatus_Parse(
    const ::std::string& name, CounteragentStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CounteragentStatus>(
    CounteragentStatus_descriptor(), name, value);
}
// ===================================================================

class CounteragentList : public ::google::protobuf::Message {
 public:
  CounteragentList();
  virtual ~CounteragentList();
  
  CounteragentList(const CounteragentList& from);
  
  inline CounteragentList& operator=(const CounteragentList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CounteragentList& default_instance();
  
  void Swap(CounteragentList* other);
  
  // implements Message ----------------------------------------------
  
  CounteragentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CounteragentList& from);
  void MergeFrom(const CounteragentList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 TotalCount = 1;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalCountFieldNumber = 1;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);
  
  // repeated .Diadoc.Api.Proto.Counteragent Counteragents = 2;
  inline int counteragents_size() const;
  inline void clear_counteragents();
  static const int kCounteragentsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Counteragent& counteragents(int index) const;
  inline ::Diadoc::Api::Proto::Counteragent* mutable_counteragents(int index);
  inline ::Diadoc::Api::Proto::Counteragent* add_counteragents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Counteragent >&
      counteragents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Counteragent >*
      mutable_counteragents();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CounteragentList)
 private:
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Counteragent > counteragents_;
  ::google::protobuf::int32 totalcount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Counteragent_2eproto();
  friend void protobuf_AssignDesc_Counteragent_2eproto();
  friend void protobuf_ShutdownFile_Counteragent_2eproto();
  
  void InitAsDefaultInstance();
  static CounteragentList* default_instance_;
};
// -------------------------------------------------------------------

class Counteragent : public ::google::protobuf::Message {
 public:
  Counteragent();
  virtual ~Counteragent();
  
  Counteragent(const Counteragent& from);
  
  inline Counteragent& operator=(const Counteragent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Counteragent& default_instance();
  
  void Swap(Counteragent* other);
  
  // implements Message ----------------------------------------------
  
  Counteragent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Counteragent& from);
  void MergeFrom(const Counteragent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string IndexKey = 1;
  inline bool has_indexkey() const;
  inline void clear_indexkey();
  static const int kIndexKeyFieldNumber = 1;
  inline const ::std::string& indexkey() const;
  inline void set_indexkey(const ::std::string& value);
  inline void set_indexkey(const char* value);
  inline void set_indexkey(const char* value, size_t size);
  inline ::std::string* mutable_indexkey();
  inline ::std::string* release_indexkey();
  
  // required .Diadoc.Api.Proto.Organization Organization = 2;
  inline bool has_organization() const;
  inline void clear_organization();
  static const int kOrganizationFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Organization& organization() const;
  inline ::Diadoc::Api::Proto::Organization* mutable_organization();
  inline ::Diadoc::Api::Proto::Organization* release_organization();
  
  // optional .Diadoc.Api.Proto.CounteragentStatus CurrentStatus = 3 [default = UnknownCounteragentStatus];
  inline bool has_currentstatus() const;
  inline void clear_currentstatus();
  static const int kCurrentStatusFieldNumber = 3;
  inline Diadoc::Api::Proto::CounteragentStatus currentstatus() const;
  inline void set_currentstatus(Diadoc::Api::Proto::CounteragentStatus value);
  
  // required sfixed64 LastEventTimestampTicks = 4;
  inline bool has_lasteventtimestampticks() const;
  inline void clear_lasteventtimestampticks();
  static const int kLastEventTimestampTicksFieldNumber = 4;
  inline ::google::protobuf::int64 lasteventtimestampticks() const;
  inline void set_lasteventtimestampticks(::google::protobuf::int64 value);
  
  // optional string MessageFromCounteragent = 6;
  inline bool has_messagefromcounteragent() const;
  inline void clear_messagefromcounteragent();
  static const int kMessageFromCounteragentFieldNumber = 6;
  inline const ::std::string& messagefromcounteragent() const;
  inline void set_messagefromcounteragent(const ::std::string& value);
  inline void set_messagefromcounteragent(const char* value);
  inline void set_messagefromcounteragent(const char* value, size_t size);
  inline ::std::string* mutable_messagefromcounteragent();
  inline ::std::string* release_messagefromcounteragent();
  
  // optional string MessageToCounteragent = 7;
  inline bool has_messagetocounteragent() const;
  inline void clear_messagetocounteragent();
  static const int kMessageToCounteragentFieldNumber = 7;
  inline const ::std::string& messagetocounteragent() const;
  inline void set_messagetocounteragent(const ::std::string& value);
  inline void set_messagetocounteragent(const char* value);
  inline void set_messagetocounteragent(const char* value, size_t size);
  inline ::std::string* mutable_messagetocounteragent();
  inline ::std::string* release_messagetocounteragent();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Counteragent)
 private:
  inline void set_has_indexkey();
  inline void clear_has_indexkey();
  inline void set_has_organization();
  inline void clear_has_organization();
  inline void set_has_currentstatus();
  inline void clear_has_currentstatus();
  inline void set_has_lasteventtimestampticks();
  inline void clear_has_lasteventtimestampticks();
  inline void set_has_messagefromcounteragent();
  inline void clear_has_messagefromcounteragent();
  inline void set_has_messagetocounteragent();
  inline void clear_has_messagetocounteragent();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* indexkey_;
  ::Diadoc::Api::Proto::Organization* organization_;
  ::google::protobuf::int64 lasteventtimestampticks_;
  ::std::string* messagefromcounteragent_;
  ::std::string* messagetocounteragent_;
  int currentstatus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Counteragent_2eproto();
  friend void protobuf_AssignDesc_Counteragent_2eproto();
  friend void protobuf_ShutdownFile_Counteragent_2eproto();
  
  void InitAsDefaultInstance();
  static Counteragent* default_instance_;
};
// -------------------------------------------------------------------

class CounteragentCertificateList : public ::google::protobuf::Message {
 public:
  CounteragentCertificateList();
  virtual ~CounteragentCertificateList();
  
  CounteragentCertificateList(const CounteragentCertificateList& from);
  
  inline CounteragentCertificateList& operator=(const CounteragentCertificateList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CounteragentCertificateList& default_instance();
  
  void Swap(CounteragentCertificateList* other);
  
  // implements Message ----------------------------------------------
  
  CounteragentCertificateList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CounteragentCertificateList& from);
  void MergeFrom(const CounteragentCertificateList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Diadoc.Api.Proto.Certificate Certificates = 1;
  inline int certificates_size() const;
  inline void clear_certificates();
  static const int kCertificatesFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Certificate& certificates(int index) const;
  inline ::Diadoc::Api::Proto::Certificate* mutable_certificates(int index);
  inline ::Diadoc::Api::Proto::Certificate* add_certificates();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Certificate >&
      certificates() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Certificate >*
      mutable_certificates();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.CounteragentCertificateList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Certificate > certificates_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Counteragent_2eproto();
  friend void protobuf_AssignDesc_Counteragent_2eproto();
  friend void protobuf_ShutdownFile_Counteragent_2eproto();
  
  void InitAsDefaultInstance();
  static CounteragentCertificateList* default_instance_;
};
// -------------------------------------------------------------------

class Certificate : public ::google::protobuf::Message {
 public:
  Certificate();
  virtual ~Certificate();
  
  Certificate(const Certificate& from);
  
  inline Certificate& operator=(const Certificate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Certificate& default_instance();
  
  void Swap(Certificate* other);
  
  // implements Message ----------------------------------------------
  
  Certificate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Certificate& from);
  void MergeFrom(const Certificate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes RawCertificateData = 1;
  inline bool has_rawcertificatedata() const;
  inline void clear_rawcertificatedata();
  static const int kRawCertificateDataFieldNumber = 1;
  inline const ::std::string& rawcertificatedata() const;
  inline void set_rawcertificatedata(const ::std::string& value);
  inline void set_rawcertificatedata(const char* value);
  inline void set_rawcertificatedata(const void* value, size_t size);
  inline ::std::string* mutable_rawcertificatedata();
  inline ::std::string* release_rawcertificatedata();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Certificate)
 private:
  inline void set_has_rawcertificatedata();
  inline void clear_has_rawcertificatedata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rawcertificatedata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Counteragent_2eproto();
  friend void protobuf_AssignDesc_Counteragent_2eproto();
  friend void protobuf_ShutdownFile_Counteragent_2eproto();
  
  void InitAsDefaultInstance();
  static Certificate* default_instance_;
};
// ===================================================================


// ===================================================================

// CounteragentList

// required int32 TotalCount = 1;
inline bool CounteragentList::has_totalcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CounteragentList::set_has_totalcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CounteragentList::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CounteragentList::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 CounteragentList::totalcount() const {
  return totalcount_;
}
inline void CounteragentList::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
}

// repeated .Diadoc.Api.Proto.Counteragent Counteragents = 2;
inline int CounteragentList::counteragents_size() const {
  return counteragents_.size();
}
inline void CounteragentList::clear_counteragents() {
  counteragents_.Clear();
}
inline const ::Diadoc::Api::Proto::Counteragent& CounteragentList::counteragents(int index) const {
  return counteragents_.Get(index);
}
inline ::Diadoc::Api::Proto::Counteragent* CounteragentList::mutable_counteragents(int index) {
  return counteragents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Counteragent* CounteragentList::add_counteragents() {
  return counteragents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Counteragent >&
CounteragentList::counteragents() const {
  return counteragents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Counteragent >*
CounteragentList::mutable_counteragents() {
  return &counteragents_;
}

// -------------------------------------------------------------------

// Counteragent

// optional string IndexKey = 1;
inline bool Counteragent::has_indexkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Counteragent::set_has_indexkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Counteragent::clear_has_indexkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Counteragent::clear_indexkey() {
  if (indexkey_ != &::google::protobuf::internal::kEmptyString) {
    indexkey_->clear();
  }
  clear_has_indexkey();
}
inline const ::std::string& Counteragent::indexkey() const {
  return *indexkey_;
}
inline void Counteragent::set_indexkey(const ::std::string& value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
}
inline void Counteragent::set_indexkey(const char* value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
}
inline void Counteragent::set_indexkey(const char* value, size_t size) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Counteragent::mutable_indexkey() {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    indexkey_ = new ::std::string;
  }
  return indexkey_;
}
inline ::std::string* Counteragent::release_indexkey() {
  clear_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = indexkey_;
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .Diadoc.Api.Proto.Organization Organization = 2;
inline bool Counteragent::has_organization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Counteragent::set_has_organization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Counteragent::clear_has_organization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Counteragent::clear_organization() {
  if (organization_ != NULL) organization_->::Diadoc::Api::Proto::Organization::Clear();
  clear_has_organization();
}
inline const ::Diadoc::Api::Proto::Organization& Counteragent::organization() const {
  return organization_ != NULL ? *organization_ : *default_instance_->organization_;
}
inline ::Diadoc::Api::Proto::Organization* Counteragent::mutable_organization() {
  set_has_organization();
  if (organization_ == NULL) organization_ = new ::Diadoc::Api::Proto::Organization;
  return organization_;
}
inline ::Diadoc::Api::Proto::Organization* Counteragent::release_organization() {
  clear_has_organization();
  ::Diadoc::Api::Proto::Organization* temp = organization_;
  organization_ = NULL;
  return temp;
}

// optional .Diadoc.Api.Proto.CounteragentStatus CurrentStatus = 3 [default = UnknownCounteragentStatus];
inline bool Counteragent::has_currentstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Counteragent::set_has_currentstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Counteragent::clear_has_currentstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Counteragent::clear_currentstatus() {
  currentstatus_ = 0;
  clear_has_currentstatus();
}
inline Diadoc::Api::Proto::CounteragentStatus Counteragent::currentstatus() const {
  return static_cast< Diadoc::Api::Proto::CounteragentStatus >(currentstatus_);
}
inline void Counteragent::set_currentstatus(Diadoc::Api::Proto::CounteragentStatus value) {
  GOOGLE_DCHECK(Diadoc::Api::Proto::CounteragentStatus_IsValid(value));
  set_has_currentstatus();
  currentstatus_ = value;
}

// required sfixed64 LastEventTimestampTicks = 4;
inline bool Counteragent::has_lasteventtimestampticks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Counteragent::set_has_lasteventtimestampticks() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Counteragent::clear_has_lasteventtimestampticks() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Counteragent::clear_lasteventtimestampticks() {
  lasteventtimestampticks_ = GOOGLE_LONGLONG(0);
  clear_has_lasteventtimestampticks();
}
inline ::google::protobuf::int64 Counteragent::lasteventtimestampticks() const {
  return lasteventtimestampticks_;
}
inline void Counteragent::set_lasteventtimestampticks(::google::protobuf::int64 value) {
  set_has_lasteventtimestampticks();
  lasteventtimestampticks_ = value;
}

// optional string MessageFromCounteragent = 6;
inline bool Counteragent::has_messagefromcounteragent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Counteragent::set_has_messagefromcounteragent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Counteragent::clear_has_messagefromcounteragent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Counteragent::clear_messagefromcounteragent() {
  if (messagefromcounteragent_ != &::google::protobuf::internal::kEmptyString) {
    messagefromcounteragent_->clear();
  }
  clear_has_messagefromcounteragent();
}
inline const ::std::string& Counteragent::messagefromcounteragent() const {
  return *messagefromcounteragent_;
}
inline void Counteragent::set_messagefromcounteragent(const ::std::string& value) {
  set_has_messagefromcounteragent();
  if (messagefromcounteragent_ == &::google::protobuf::internal::kEmptyString) {
    messagefromcounteragent_ = new ::std::string;
  }
  messagefromcounteragent_->assign(value);
}
inline void Counteragent::set_messagefromcounteragent(const char* value) {
  set_has_messagefromcounteragent();
  if (messagefromcounteragent_ == &::google::protobuf::internal::kEmptyString) {
    messagefromcounteragent_ = new ::std::string;
  }
  messagefromcounteragent_->assign(value);
}
inline void Counteragent::set_messagefromcounteragent(const char* value, size_t size) {
  set_has_messagefromcounteragent();
  if (messagefromcounteragent_ == &::google::protobuf::internal::kEmptyString) {
    messagefromcounteragent_ = new ::std::string;
  }
  messagefromcounteragent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Counteragent::mutable_messagefromcounteragent() {
  set_has_messagefromcounteragent();
  if (messagefromcounteragent_ == &::google::protobuf::internal::kEmptyString) {
    messagefromcounteragent_ = new ::std::string;
  }
  return messagefromcounteragent_;
}
inline ::std::string* Counteragent::release_messagefromcounteragent() {
  clear_has_messagefromcounteragent();
  if (messagefromcounteragent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messagefromcounteragent_;
    messagefromcounteragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string MessageToCounteragent = 7;
inline bool Counteragent::has_messagetocounteragent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Counteragent::set_has_messagetocounteragent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Counteragent::clear_has_messagetocounteragent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Counteragent::clear_messagetocounteragent() {
  if (messagetocounteragent_ != &::google::protobuf::internal::kEmptyString) {
    messagetocounteragent_->clear();
  }
  clear_has_messagetocounteragent();
}
inline const ::std::string& Counteragent::messagetocounteragent() const {
  return *messagetocounteragent_;
}
inline void Counteragent::set_messagetocounteragent(const ::std::string& value) {
  set_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::kEmptyString) {
    messagetocounteragent_ = new ::std::string;
  }
  messagetocounteragent_->assign(value);
}
inline void Counteragent::set_messagetocounteragent(const char* value) {
  set_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::kEmptyString) {
    messagetocounteragent_ = new ::std::string;
  }
  messagetocounteragent_->assign(value);
}
inline void Counteragent::set_messagetocounteragent(const char* value, size_t size) {
  set_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::kEmptyString) {
    messagetocounteragent_ = new ::std::string;
  }
  messagetocounteragent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Counteragent::mutable_messagetocounteragent() {
  set_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::kEmptyString) {
    messagetocounteragent_ = new ::std::string;
  }
  return messagetocounteragent_;
}
inline ::std::string* Counteragent::release_messagetocounteragent() {
  clear_has_messagetocounteragent();
  if (messagetocounteragent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messagetocounteragent_;
    messagetocounteragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CounteragentCertificateList

// repeated .Diadoc.Api.Proto.Certificate Certificates = 1;
inline int CounteragentCertificateList::certificates_size() const {
  return certificates_.size();
}
inline void CounteragentCertificateList::clear_certificates() {
  certificates_.Clear();
}
inline const ::Diadoc::Api::Proto::Certificate& CounteragentCertificateList::certificates(int index) const {
  return certificates_.Get(index);
}
inline ::Diadoc::Api::Proto::Certificate* CounteragentCertificateList::mutable_certificates(int index) {
  return certificates_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Certificate* CounteragentCertificateList::add_certificates() {
  return certificates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Certificate >&
CounteragentCertificateList::certificates() const {
  return certificates_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Certificate >*
CounteragentCertificateList::mutable_certificates() {
  return &certificates_;
}

// -------------------------------------------------------------------

// Certificate

// required bytes RawCertificateData = 1;
inline bool Certificate::has_rawcertificatedata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Certificate::set_has_rawcertificatedata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Certificate::clear_has_rawcertificatedata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Certificate::clear_rawcertificatedata() {
  if (rawcertificatedata_ != &::google::protobuf::internal::kEmptyString) {
    rawcertificatedata_->clear();
  }
  clear_has_rawcertificatedata();
}
inline const ::std::string& Certificate::rawcertificatedata() const {
  return *rawcertificatedata_;
}
inline void Certificate::set_rawcertificatedata(const ::std::string& value) {
  set_has_rawcertificatedata();
  if (rawcertificatedata_ == &::google::protobuf::internal::kEmptyString) {
    rawcertificatedata_ = new ::std::string;
  }
  rawcertificatedata_->assign(value);
}
inline void Certificate::set_rawcertificatedata(const char* value) {
  set_has_rawcertificatedata();
  if (rawcertificatedata_ == &::google::protobuf::internal::kEmptyString) {
    rawcertificatedata_ = new ::std::string;
  }
  rawcertificatedata_->assign(value);
}
inline void Certificate::set_rawcertificatedata(const void* value, size_t size) {
  set_has_rawcertificatedata();
  if (rawcertificatedata_ == &::google::protobuf::internal::kEmptyString) {
    rawcertificatedata_ = new ::std::string;
  }
  rawcertificatedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Certificate::mutable_rawcertificatedata() {
  set_has_rawcertificatedata();
  if (rawcertificatedata_ == &::google::protobuf::internal::kEmptyString) {
    rawcertificatedata_ = new ::std::string;
  }
  return rawcertificatedata_;
}
inline ::std::string* Certificate::release_rawcertificatedata() {
  clear_has_rawcertificatedata();
  if (rawcertificatedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rawcertificatedata_;
    rawcertificatedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< Diadoc::Api::Proto::CounteragentStatus>() {
  return Diadoc::Api::Proto::CounteragentStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Counteragent_2eproto__INCLUDED
