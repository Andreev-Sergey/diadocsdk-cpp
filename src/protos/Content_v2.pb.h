// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Content_v2.proto

#ifndef PROTOBUF_Content_5fv2_2eproto__INCLUDED
#define PROTOBUF_Content_5fv2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "DocumentId.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Content_5fv2_2eproto();
void protobuf_AssignDesc_Content_5fv2_2eproto();
void protobuf_ShutdownFile_Content_5fv2_2eproto();

class Content_v2;

// ===================================================================

class Content_v2 : public ::google::protobuf::Message {
 public:
  Content_v2();
  virtual ~Content_v2();
  
  Content_v2(const Content_v2& from);
  
  inline Content_v2& operator=(const Content_v2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Content_v2& default_instance();
  
  void Swap(Content_v2* other);
  
  // implements Message ----------------------------------------------
  
  Content_v2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content_v2& from);
  void MergeFrom(const Content_v2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional string NameOnShelf = 2;
  inline bool has_nameonshelf() const;
  inline void clear_nameonshelf();
  static const int kNameOnShelfFieldNumber = 2;
  inline const ::std::string& nameonshelf() const;
  inline void set_nameonshelf(const ::std::string& value);
  inline void set_nameonshelf(const char* value);
  inline void set_nameonshelf(const char* value, size_t size);
  inline ::std::string* mutable_nameonshelf();
  inline ::std::string* release_nameonshelf();
  
  // optional string PatchedContentId = 3;
  inline bool has_patchedcontentid() const;
  inline void clear_patchedcontentid();
  static const int kPatchedContentIdFieldNumber = 3;
  inline const ::std::string& patchedcontentid() const;
  inline void set_patchedcontentid(const ::std::string& value);
  inline void set_patchedcontentid(const char* value);
  inline void set_patchedcontentid(const char* value, size_t size);
  inline ::std::string* mutable_patchedcontentid();
  inline ::std::string* release_patchedcontentid();
  
  // optional .Diadoc.Api.Proto.DocumentIdEx DocumentId = 4;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentIdEx& documentid() const;
  inline ::Diadoc::Api::Proto::DocumentIdEx* mutable_documentid();
  inline ::Diadoc::Api::Proto::DocumentIdEx* release_documentid();
  
  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Content_v2)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_nameonshelf();
  inline void clear_has_nameonshelf();
  inline void set_has_patchedcontentid();
  inline void clear_has_patchedcontentid();
  inline void set_has_documentid();
  inline void clear_has_documentid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  ::std::string* nameonshelf_;
  ::std::string* patchedcontentid_;
  ::Diadoc::Api::Proto::DocumentIdEx* documentid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Content_5fv2_2eproto();
  friend void protobuf_AssignDesc_Content_5fv2_2eproto();
  friend void protobuf_ShutdownFile_Content_5fv2_2eproto();
  
  void InitAsDefaultInstance();
  static Content_v2* default_instance_;
};
// ===================================================================


// ===================================================================

// Content_v2

// optional bytes Content = 1;
inline bool Content_v2::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Content_v2::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Content_v2::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Content_v2::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Content_v2::content() const {
  return *content_;
}
inline void Content_v2::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Content_v2::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Content_v2::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content_v2::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Content_v2::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string NameOnShelf = 2;
inline bool Content_v2::has_nameonshelf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Content_v2::set_has_nameonshelf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Content_v2::clear_has_nameonshelf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Content_v2::clear_nameonshelf() {
  if (nameonshelf_ != &::google::protobuf::internal::kEmptyString) {
    nameonshelf_->clear();
  }
  clear_has_nameonshelf();
}
inline const ::std::string& Content_v2::nameonshelf() const {
  return *nameonshelf_;
}
inline void Content_v2::set_nameonshelf(const ::std::string& value) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::kEmptyString) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(value);
}
inline void Content_v2::set_nameonshelf(const char* value) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::kEmptyString) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(value);
}
inline void Content_v2::set_nameonshelf(const char* value, size_t size) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::kEmptyString) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content_v2::mutable_nameonshelf() {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::kEmptyString) {
    nameonshelf_ = new ::std::string;
  }
  return nameonshelf_;
}
inline ::std::string* Content_v2::release_nameonshelf() {
  clear_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nameonshelf_;
    nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string PatchedContentId = 3;
inline bool Content_v2::has_patchedcontentid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Content_v2::set_has_patchedcontentid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Content_v2::clear_has_patchedcontentid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Content_v2::clear_patchedcontentid() {
  if (patchedcontentid_ != &::google::protobuf::internal::kEmptyString) {
    patchedcontentid_->clear();
  }
  clear_has_patchedcontentid();
}
inline const ::std::string& Content_v2::patchedcontentid() const {
  return *patchedcontentid_;
}
inline void Content_v2::set_patchedcontentid(const ::std::string& value) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::kEmptyString) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(value);
}
inline void Content_v2::set_patchedcontentid(const char* value) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::kEmptyString) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(value);
}
inline void Content_v2::set_patchedcontentid(const char* value, size_t size) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::kEmptyString) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Content_v2::mutable_patchedcontentid() {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::kEmptyString) {
    patchedcontentid_ = new ::std::string;
  }
  return patchedcontentid_;
}
inline ::std::string* Content_v2::release_patchedcontentid() {
  clear_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patchedcontentid_;
    patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Diadoc.Api.Proto.DocumentIdEx DocumentId = 4;
inline bool Content_v2::has_documentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Content_v2::set_has_documentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Content_v2::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Content_v2::clear_documentid() {
  if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentIdEx::Clear();
  clear_has_documentid();
}
inline const ::Diadoc::Api::Proto::DocumentIdEx& Content_v2::documentid() const {
  return documentid_ != NULL ? *documentid_ : *default_instance_->documentid_;
}
inline ::Diadoc::Api::Proto::DocumentIdEx* Content_v2::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == NULL) documentid_ = new ::Diadoc::Api::Proto::DocumentIdEx;
  return documentid_;
}
inline ::Diadoc::Api::Proto::DocumentIdEx* Content_v2::release_documentid() {
  clear_has_documentid();
  ::Diadoc::Api::Proto::DocumentIdEx* temp = documentid_;
  documentid_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Content_5fv2_2eproto__INCLUDED
