// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Docflow/RecipientSignatureDocflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Docflow {

namespace {

const ::google::protobuf::Descriptor* RecipientSignatureDocflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecipientSignatureDocflow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Docflow_2fRecipientSignatureDocflow_2eproto() {
  protobuf_AddDesc_Docflow_2fRecipientSignatureDocflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Docflow/RecipientSignatureDocflow.proto");
  GOOGLE_CHECK(file != NULL);
  RecipientSignatureDocflow_descriptor_ = file->message_type(0);
  static const int RecipientSignatureDocflow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecipientSignatureDocflow, isfinished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecipientSignatureDocflow, recipientsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecipientSignatureDocflow, deliverytimestamp_),
  };
  RecipientSignatureDocflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecipientSignatureDocflow_descriptor_,
      RecipientSignatureDocflow::default_instance_,
      RecipientSignatureDocflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecipientSignatureDocflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecipientSignatureDocflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecipientSignatureDocflow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Docflow_2fRecipientSignatureDocflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecipientSignatureDocflow_descriptor_, &RecipientSignatureDocflow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Docflow_2fRecipientSignatureDocflow_2eproto() {
  delete RecipientSignatureDocflow::default_instance_;
  delete RecipientSignatureDocflow_reflection_;
}

void protobuf_AddDesc_Docflow_2fRecipientSignatureDocflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Timestamp_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fAttachment_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'Docflow/RecipientSignatureDocflow.prot"
    "o\022\030Diadoc.Api.Proto.Docflow\032\017Timestamp.p"
    "roto\032\030Docflow/Attachment.proto\"\250\001\n\031Recip"
    "ientSignatureDocflow\022\022\n\nIsFinished\030\001 \001(\010"
    "\022\?\n\022RecipientSignature\030\002 \001(\0132#.Diadoc.Ap"
    "i.Proto.Docflow.Signature\0226\n\021DeliveryTim"
    "estamp\030\003 \001(\0132\033.Diadoc.Api.Proto.Timestam"
    "p", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Docflow/RecipientSignatureDocflow.proto", &protobuf_RegisterTypes);
  RecipientSignatureDocflow::default_instance_ = new RecipientSignatureDocflow();
  RecipientSignatureDocflow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Docflow_2fRecipientSignatureDocflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Docflow_2fRecipientSignatureDocflow_2eproto {
  StaticDescriptorInitializer_Docflow_2fRecipientSignatureDocflow_2eproto() {
    protobuf_AddDesc_Docflow_2fRecipientSignatureDocflow_2eproto();
  }
} static_descriptor_initializer_Docflow_2fRecipientSignatureDocflow_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RecipientSignatureDocflow::kIsFinishedFieldNumber;
const int RecipientSignatureDocflow::kRecipientSignatureFieldNumber;
const int RecipientSignatureDocflow::kDeliveryTimestampFieldNumber;
#endif  // !_MSC_VER

RecipientSignatureDocflow::RecipientSignatureDocflow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecipientSignatureDocflow::InitAsDefaultInstance() {
  recipientsignature_ = const_cast< ::Diadoc::Api::Proto::Docflow::Signature*>(&::Diadoc::Api::Proto::Docflow::Signature::default_instance());
  deliverytimestamp_ = const_cast< ::Diadoc::Api::Proto::Timestamp*>(&::Diadoc::Api::Proto::Timestamp::default_instance());
}

RecipientSignatureDocflow::RecipientSignatureDocflow(const RecipientSignatureDocflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecipientSignatureDocflow::SharedCtor() {
  _cached_size_ = 0;
  isfinished_ = false;
  recipientsignature_ = NULL;
  deliverytimestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecipientSignatureDocflow::~RecipientSignatureDocflow() {
  SharedDtor();
}

void RecipientSignatureDocflow::SharedDtor() {
  if (this != default_instance_) {
    delete recipientsignature_;
    delete deliverytimestamp_;
  }
}

void RecipientSignatureDocflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecipientSignatureDocflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecipientSignatureDocflow_descriptor_;
}

const RecipientSignatureDocflow& RecipientSignatureDocflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Docflow_2fRecipientSignatureDocflow_2eproto();  return *default_instance_;
}

RecipientSignatureDocflow* RecipientSignatureDocflow::default_instance_ = NULL;

RecipientSignatureDocflow* RecipientSignatureDocflow::New() const {
  return new RecipientSignatureDocflow;
}

void RecipientSignatureDocflow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isfinished_ = false;
    if (has_recipientsignature()) {
      if (recipientsignature_ != NULL) recipientsignature_->::Diadoc::Api::Proto::Docflow::Signature::Clear();
    }
    if (has_deliverytimestamp()) {
      if (deliverytimestamp_ != NULL) deliverytimestamp_->::Diadoc::Api::Proto::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecipientSignatureDocflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsFinished = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RecipientSignature;
        break;
      }
      
      // optional .Diadoc.Api.Proto.Docflow.Signature RecipientSignature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RecipientSignature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recipientsignature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DeliveryTimestamp;
        break;
      }
      
      // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeliveryTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliverytimestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecipientSignatureDocflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfinished(), output);
  }
  
  // optional .Diadoc.Api.Proto.Docflow.Signature RecipientSignature = 2;
  if (has_recipientsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recipientsignature(), output);
  }
  
  // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 3;
  if (has_deliverytimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deliverytimestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecipientSignatureDocflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsFinished = 1;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfinished(), target);
  }
  
  // optional .Diadoc.Api.Proto.Docflow.Signature RecipientSignature = 2;
  if (has_recipientsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recipientsignature(), target);
  }
  
  // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 3;
  if (has_deliverytimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deliverytimestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecipientSignatureDocflow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsFinished = 1;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }
    
    // optional .Diadoc.Api.Proto.Docflow.Signature RecipientSignature = 2;
    if (has_recipientsignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recipientsignature());
    }
    
    // optional .Diadoc.Api.Proto.Timestamp DeliveryTimestamp = 3;
    if (has_deliverytimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deliverytimestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecipientSignatureDocflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecipientSignatureDocflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecipientSignatureDocflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecipientSignatureDocflow::MergeFrom(const RecipientSignatureDocflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_recipientsignature()) {
      mutable_recipientsignature()->::Diadoc::Api::Proto::Docflow::Signature::MergeFrom(from.recipientsignature());
    }
    if (from.has_deliverytimestamp()) {
      mutable_deliverytimestamp()->::Diadoc::Api::Proto::Timestamp::MergeFrom(from.deliverytimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecipientSignatureDocflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecipientSignatureDocflow::CopyFrom(const RecipientSignatureDocflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipientSignatureDocflow::IsInitialized() const {
  
  if (has_recipientsignature()) {
    if (!this->recipientsignature().IsInitialized()) return false;
  }
  if (has_deliverytimestamp()) {
    if (!this->deliverytimestamp().IsInitialized()) return false;
  }
  return true;
}

void RecipientSignatureDocflow::Swap(RecipientSignatureDocflow* other) {
  if (other != this) {
    std::swap(isfinished_, other->isfinished_);
    std::swap(recipientsignature_, other->recipientsignature_);
    std::swap(deliverytimestamp_, other->deliverytimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecipientSignatureDocflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecipientSignatureDocflow_descriptor_;
  metadata.reflection = RecipientSignatureDocflow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Docflow
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
