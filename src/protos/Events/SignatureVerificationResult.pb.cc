// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Events/SignatureVerificationResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Events {

namespace {

const ::google::protobuf::Descriptor* SignatureVerificationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignatureVerificationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CertificateVerificationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CertificateVerificationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CertificateChainElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CertificateChainElement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Events_2fSignatureVerificationResult_2eproto() {
  protobuf_AddDesc_Events_2fSignatureVerificationResult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Events/SignatureVerificationResult.proto");
  GOOGLE_CHECK(file != NULL);
  SignatureVerificationResult_descriptor_ = file->message_type(0);
  static const int SignatureVerificationResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerificationResult, signaturestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerificationResult, certificatestatus_),
  };
  SignatureVerificationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignatureVerificationResult_descriptor_,
      SignatureVerificationResult::default_instance_,
      SignatureVerificationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerificationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerificationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignatureVerificationResult));
  CertificateVerificationResult_descriptor_ = file->message_type(1);
  static const int CertificateVerificationResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateVerificationResult, verificationtimeticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateVerificationResult, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateVerificationResult, certificatechain_),
  };
  CertificateVerificationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CertificateVerificationResult_descriptor_,
      CertificateVerificationResult::default_instance_,
      CertificateVerificationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateVerificationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateVerificationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CertificateVerificationResult));
  CertificateChainElement_descriptor_ = file->message_type(2);
  static const int CertificateChainElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateChainElement, certificatechainstatusflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateChainElement, dercertificate_),
  };
  CertificateChainElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CertificateChainElement_descriptor_,
      CertificateChainElement::default_instance_,
      CertificateChainElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateChainElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateChainElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CertificateChainElement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Events_2fSignatureVerificationResult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignatureVerificationResult_descriptor_, &SignatureVerificationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CertificateVerificationResult_descriptor_, &CertificateVerificationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CertificateChainElement_descriptor_, &CertificateChainElement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Events_2fSignatureVerificationResult_2eproto() {
  delete SignatureVerificationResult::default_instance_;
  delete SignatureVerificationResult_reflection_;
  delete CertificateVerificationResult::default_instance_;
  delete CertificateVerificationResult_reflection_;
  delete CertificateChainElement::default_instance_;
  delete CertificateChainElement_reflection_;
}

void protobuf_AddDesc_Events_2fSignatureVerificationResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(Events/SignatureVerificationResult.pro"
    "to\022\027Diadoc.Api.Proto.Events\"\211\001\n\033Signatur"
    "eVerificationResult\022\027\n\017SignatureStatus\030\001"
    " \002(\010\022Q\n\021CertificateStatus\030\002 \001(\01326.Diadoc"
    ".Api.Proto.Events.CertificateVerificatio"
    "nResult\"\233\001\n\035CertificateVerificationResul"
    "t\022\035\n\025VerificationTimeTicks\030\001 \002(\020\022\017\n\007IsVa"
    "lid\030\002 \002(\010\022J\n\020CertificateChain\030\003 \003(\01320.Di"
    "adoc.Api.Proto.Events.CertificateChainEl"
    "ement\"V\n\027CertificateChainElement\022#\n\033Cert"
    "ificateChainStatusFlags\030\001 \002(\005\022\026\n\016DerCert"
    "ificate\030\002 \002(\014", 453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Events/SignatureVerificationResult.proto", &protobuf_RegisterTypes);
  SignatureVerificationResult::default_instance_ = new SignatureVerificationResult();
  CertificateVerificationResult::default_instance_ = new CertificateVerificationResult();
  CertificateChainElement::default_instance_ = new CertificateChainElement();
  SignatureVerificationResult::default_instance_->InitAsDefaultInstance();
  CertificateVerificationResult::default_instance_->InitAsDefaultInstance();
  CertificateChainElement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Events_2fSignatureVerificationResult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Events_2fSignatureVerificationResult_2eproto {
  StaticDescriptorInitializer_Events_2fSignatureVerificationResult_2eproto() {
    protobuf_AddDesc_Events_2fSignatureVerificationResult_2eproto();
  }
} static_descriptor_initializer_Events_2fSignatureVerificationResult_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SignatureVerificationResult::kSignatureStatusFieldNumber;
const int SignatureVerificationResult::kCertificateStatusFieldNumber;
#endif  // !_MSC_VER

SignatureVerificationResult::SignatureVerificationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignatureVerificationResult::InitAsDefaultInstance() {
  certificatestatus_ = const_cast< ::Diadoc::Api::Proto::Events::CertificateVerificationResult*>(&::Diadoc::Api::Proto::Events::CertificateVerificationResult::default_instance());
}

SignatureVerificationResult::SignatureVerificationResult(const SignatureVerificationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignatureVerificationResult::SharedCtor() {
  _cached_size_ = 0;
  signaturestatus_ = false;
  certificatestatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignatureVerificationResult::~SignatureVerificationResult() {
  SharedDtor();
}

void SignatureVerificationResult::SharedDtor() {
  if (this != default_instance_) {
    delete certificatestatus_;
  }
}

void SignatureVerificationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignatureVerificationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignatureVerificationResult_descriptor_;
}

const SignatureVerificationResult& SignatureVerificationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fSignatureVerificationResult_2eproto();  return *default_instance_;
}

SignatureVerificationResult* SignatureVerificationResult::default_instance_ = NULL;

SignatureVerificationResult* SignatureVerificationResult::New() const {
  return new SignatureVerificationResult;
}

void SignatureVerificationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signaturestatus_ = false;
    if (has_certificatestatus()) {
      if (certificatestatus_ != NULL) certificatestatus_->::Diadoc::Api::Proto::Events::CertificateVerificationResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignatureVerificationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool SignatureStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signaturestatus_)));
          set_has_signaturestatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CertificateStatus;
        break;
      }
      
      // optional .Diadoc.Api.Proto.Events.CertificateVerificationResult CertificateStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CertificateStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certificatestatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignatureVerificationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool SignatureStatus = 1;
  if (has_signaturestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->signaturestatus(), output);
  }
  
  // optional .Diadoc.Api.Proto.Events.CertificateVerificationResult CertificateStatus = 2;
  if (has_certificatestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->certificatestatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignatureVerificationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool SignatureStatus = 1;
  if (has_signaturestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->signaturestatus(), target);
  }
  
  // optional .Diadoc.Api.Proto.Events.CertificateVerificationResult CertificateStatus = 2;
  if (has_certificatestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->certificatestatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignatureVerificationResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool SignatureStatus = 1;
    if (has_signaturestatus()) {
      total_size += 1 + 1;
    }
    
    // optional .Diadoc.Api.Proto.Events.CertificateVerificationResult CertificateStatus = 2;
    if (has_certificatestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->certificatestatus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignatureVerificationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignatureVerificationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignatureVerificationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignatureVerificationResult::MergeFrom(const SignatureVerificationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signaturestatus()) {
      set_signaturestatus(from.signaturestatus());
    }
    if (from.has_certificatestatus()) {
      mutable_certificatestatus()->::Diadoc::Api::Proto::Events::CertificateVerificationResult::MergeFrom(from.certificatestatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignatureVerificationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureVerificationResult::CopyFrom(const SignatureVerificationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureVerificationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_certificatestatus()) {
    if (!this->certificatestatus().IsInitialized()) return false;
  }
  return true;
}

void SignatureVerificationResult::Swap(SignatureVerificationResult* other) {
  if (other != this) {
    std::swap(signaturestatus_, other->signaturestatus_);
    std::swap(certificatestatus_, other->certificatestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignatureVerificationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignatureVerificationResult_descriptor_;
  metadata.reflection = SignatureVerificationResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CertificateVerificationResult::kVerificationTimeTicksFieldNumber;
const int CertificateVerificationResult::kIsValidFieldNumber;
const int CertificateVerificationResult::kCertificateChainFieldNumber;
#endif  // !_MSC_VER

CertificateVerificationResult::CertificateVerificationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CertificateVerificationResult::InitAsDefaultInstance() {
}

CertificateVerificationResult::CertificateVerificationResult(const CertificateVerificationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CertificateVerificationResult::SharedCtor() {
  _cached_size_ = 0;
  verificationtimeticks_ = GOOGLE_LONGLONG(0);
  isvalid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertificateVerificationResult::~CertificateVerificationResult() {
  SharedDtor();
}

void CertificateVerificationResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CertificateVerificationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertificateVerificationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CertificateVerificationResult_descriptor_;
}

const CertificateVerificationResult& CertificateVerificationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fSignatureVerificationResult_2eproto();  return *default_instance_;
}

CertificateVerificationResult* CertificateVerificationResult::default_instance_ = NULL;

CertificateVerificationResult* CertificateVerificationResult::New() const {
  return new CertificateVerificationResult;
}

void CertificateVerificationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    verificationtimeticks_ = GOOGLE_LONGLONG(0);
    isvalid_ = false;
  }
  certificatechain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CertificateVerificationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 VerificationTimeTicks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &verificationtimeticks_)));
          set_has_verificationtimeticks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsValid;
        break;
      }
      
      // required bool IsValid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CertificateChain;
        break;
      }
      
      // repeated .Diadoc.Api.Proto.Events.CertificateChainElement CertificateChain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CertificateChain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_certificatechain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CertificateChain;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CertificateVerificationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed64 VerificationTimeTicks = 1;
  if (has_verificationtimeticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->verificationtimeticks(), output);
  }
  
  // required bool IsValid = 2;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isvalid(), output);
  }
  
  // repeated .Diadoc.Api.Proto.Events.CertificateChainElement CertificateChain = 3;
  for (int i = 0; i < this->certificatechain_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->certificatechain(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CertificateVerificationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed64 VerificationTimeTicks = 1;
  if (has_verificationtimeticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->verificationtimeticks(), target);
  }
  
  // required bool IsValid = 2;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isvalid(), target);
  }
  
  // repeated .Diadoc.Api.Proto.Events.CertificateChainElement CertificateChain = 3;
  for (int i = 0; i < this->certificatechain_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->certificatechain(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CertificateVerificationResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed64 VerificationTimeTicks = 1;
    if (has_verificationtimeticks()) {
      total_size += 1 + 8;
    }
    
    // required bool IsValid = 2;
    if (has_isvalid()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .Diadoc.Api.Proto.Events.CertificateChainElement CertificateChain = 3;
  total_size += 1 * this->certificatechain_size();
  for (int i = 0; i < this->certificatechain_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->certificatechain(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateVerificationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CertificateVerificationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CertificateVerificationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CertificateVerificationResult::MergeFrom(const CertificateVerificationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  certificatechain_.MergeFrom(from.certificatechain_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_verificationtimeticks()) {
      set_verificationtimeticks(from.verificationtimeticks());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CertificateVerificationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateVerificationResult::CopyFrom(const CertificateVerificationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateVerificationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < certificatechain_size(); i++) {
    if (!this->certificatechain(i).IsInitialized()) return false;
  }
  return true;
}

void CertificateVerificationResult::Swap(CertificateVerificationResult* other) {
  if (other != this) {
    std::swap(verificationtimeticks_, other->verificationtimeticks_);
    std::swap(isvalid_, other->isvalid_);
    certificatechain_.Swap(&other->certificatechain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CertificateVerificationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CertificateVerificationResult_descriptor_;
  metadata.reflection = CertificateVerificationResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CertificateChainElement::kCertificateChainStatusFlagsFieldNumber;
const int CertificateChainElement::kDerCertificateFieldNumber;
#endif  // !_MSC_VER

CertificateChainElement::CertificateChainElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CertificateChainElement::InitAsDefaultInstance() {
}

CertificateChainElement::CertificateChainElement(const CertificateChainElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CertificateChainElement::SharedCtor() {
  _cached_size_ = 0;
  certificatechainstatusflags_ = 0;
  dercertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertificateChainElement::~CertificateChainElement() {
  SharedDtor();
}

void CertificateChainElement::SharedDtor() {
  if (dercertificate_ != &::google::protobuf::internal::kEmptyString) {
    delete dercertificate_;
  }
  if (this != default_instance_) {
  }
}

void CertificateChainElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertificateChainElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CertificateChainElement_descriptor_;
}

const CertificateChainElement& CertificateChainElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fSignatureVerificationResult_2eproto();  return *default_instance_;
}

CertificateChainElement* CertificateChainElement::default_instance_ = NULL;

CertificateChainElement* CertificateChainElement::New() const {
  return new CertificateChainElement;
}

void CertificateChainElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    certificatechainstatusflags_ = 0;
    if (has_dercertificate()) {
      if (dercertificate_ != &::google::protobuf::internal::kEmptyString) {
        dercertificate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CertificateChainElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CertificateChainStatusFlags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &certificatechainstatusflags_)));
          set_has_certificatechainstatusflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DerCertificate;
        break;
      }
      
      // required bytes DerCertificate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DerCertificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dercertificate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CertificateChainElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CertificateChainStatusFlags = 1;
  if (has_certificatechainstatusflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->certificatechainstatusflags(), output);
  }
  
  // required bytes DerCertificate = 2;
  if (has_dercertificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->dercertificate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CertificateChainElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CertificateChainStatusFlags = 1;
  if (has_certificatechainstatusflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->certificatechainstatusflags(), target);
  }
  
  // required bytes DerCertificate = 2;
  if (has_dercertificate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dercertificate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CertificateChainElement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CertificateChainStatusFlags = 1;
    if (has_certificatechainstatusflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->certificatechainstatusflags());
    }
    
    // required bytes DerCertificate = 2;
    if (has_dercertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dercertificate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateChainElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CertificateChainElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CertificateChainElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CertificateChainElement::MergeFrom(const CertificateChainElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_certificatechainstatusflags()) {
      set_certificatechainstatusflags(from.certificatechainstatusflags());
    }
    if (from.has_dercertificate()) {
      set_dercertificate(from.dercertificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CertificateChainElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateChainElement::CopyFrom(const CertificateChainElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateChainElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CertificateChainElement::Swap(CertificateChainElement* other) {
  if (other != this) {
    std::swap(certificatechainstatusflags_, other->certificatechainstatusflags_);
    std::swap(dercertificate_, other->dercertificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CertificateChainElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CertificateChainElement_descriptor_;
  metadata.reflection = CertificateChainElement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Events
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
